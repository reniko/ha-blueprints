blueprint:
  name: Appliance Runtime Tracker
  description: Tracks appliance runtime, energy consumption, and cycles. Sends notifications for start, end, and service reminders.
  domain: automation

  input:
    ### POWER TRACKING ###
    power_tracking:
      name: Power Tracking
      description: Settings related to power tracking
      input:
        power_sensor:
          name: Power Sensor
          description: Sensor tracking current power consumption (W)
          selector:
            entity:
              domain: sensor

    ### HELPER ###
    appliance_helpers:
      name: Appliance helper
      description: Appliance Helper
      input:
        appliance_helper:
          name: Text helper
          description: Text helper used as storage
          selector:
            entity:
              domain: input_text

    ### THRESHOLDS AND DURATIONS ###
    thresholds:
      name: Thresholds and Durations
      description: Configurations for start and stop detection
      input:
        power_threshold_start:
          name: Power Threshold (Start)
          description: Power level (W) to trigger start event
          default: 10
          selector:
            number:
              min: 1
              max: 5000
              unit_of_measurement: W
        start_duration:
          name: Start Duration
          description: Time power must be above threshold to trigger start (minutes)
          default: 1.0
          selector:
            number:
              min: 0.1
              max: 5
              step: 0.1
              unit_of_measurement: minutes
        power_threshold_end:
          name: Power Threshold (End)
          description: Power level (W) to trigger end event
          default: 10
          selector:
            number:
              min: 1
              max: 5000
              unit_of_measurement: W
        end_duration:
          name: End Duration
          description: Time power must be below threshold to trigger end (minutes)
          default: 1.0
          selector:
            number:
              min: 0.1
              max: 5
              step: 0.1
              unit_of_measurement: minutes
 
    ### NOTIFICATIONS ###
    notifications:
      name: Notifications
      description: Settings for notifications
      input:
        notification_target:
          name: Notification Target
          description: Target for notifications (e.g. notify.notification_<group name>)
          selector:
            text:
        notification_channel:
          name: Notification Channel
          description: Channel for notifications
          default: "appliance"
          selector:
            text:
        notification_tag:
          name: Notification Tag
          description: Tag for notifications
          default: ""
          selector:
            text:
        notify_start:
          name: Send Start Notification
          description: Enable start notification
          default: true
          selector:
            boolean: {}         
        notification_title_start:
          name: Start Notification Title
          description: Title for start notification
          default: "Appliance Started"
          selector:
            text:
        notification_text_start:
          name: Start Notification Text
          description: Text for start notification
          default: "The appliance has started."
          selector:
            text:
        notify_end:
          name: Send End Notification
          description: Enable end notification
          default: true
          selector:
            boolean: {}         
        notification_title_end:
          name: End Notification Title
          description: Title for end notification
          default: "Appliance Finished"
          selector:
            text:
        notification_text_end:
          name: End Notification Text
          description: Text for end notification (will include additional info)
          default: "The appliance has finished running."
          selector:
            text:

    ### DURATION TRACKING ###
    duration_tracking:
      name: Duration Tracking
      description: Track appliance run duration
      input:
        track_duration:
          name: Track duration
          description: Enable tracking of the duration of the appiance run
          default: true
          selector:
            boolean: {}
        add_duration_tracking_to_end_notification:
          name: Add duration tacking to end notification
          description: Include duration in end notification
          default: true
          selector:
            boolean: {}
        duration_notification_text:
          name: Energy Notification Text
          description: Text for duration in end notification. It is postfixed with "{{ duration }}"
          default: "Duration: "
          selector:
            text:
    
    ### ENERGY TRACKING ###
    energy_tracking:
      name: Energy Tracking
      description: Settings related to energy tracking
      input:
        track_energy:
          name: Track Energy consumption
          description: Enable energy tracking
          default: true
          selector:
            boolean: {}      
        energy_sensor:
          name: Energy Sensor
          description: Sensor tracking the total consumed energy (kWh, up-counting)
          selector:
            entity:
              domain: sensor  
        add_energy_tracking_to_end_notification:
          name: Add Energy tacking to end notification
          description: Include consumed energy in end notification
          default: true
          selector:
            boolean: {}
        energy_notification_text:
          name: Energy Notification Text
          description: Text for energy cosumtion end notification. It is postfixed with "{{ energy }} kWh"
          default: "Energy consumed: "
          selector:
            text:

    ### CYCLE TRACKING ###
    cycle_tracking:
      name: Cycle Tracking
      description: Track appliance usage cycles
      input:
        track_cycles:
          name: Track Cycles
          description: Enable tracking appliance cycles
          default: true
          selector:
            boolean: {}
        add_cycle_tracking_to_end_notification:
          name: Add cycle tacking to end notification
          description: Include cycles in end notification
          default: true
          selector:
            boolean: {}
        cycle_notification_text:
          name: Cycle Notification Text
          description: Text for cycles in end notification. It is postfixed with "{{ cycles }}"
          default: "Cycles: "
          selector:
            text:
    
    ### SERVICE REMINDER ###
    service_reminder:
      name: Service Reminder
      description: Reminders for service maintenance
      input:
        track_service_reminder:
          name: Track Service Reminder
          description: Enable service reminder after X cycles
          default: true
          selector:
            boolean: {}
        service_threshold:
          name: Service Threshold
          description: Number of cycles before service reminder
          default: 10
          selector:
            number:
              min: 1
              max: 1000
        notify_service_reminder:
          name: Send a service reminder notification
          description: Include consumed energy in end notification
          default: true
          selector:
            boolean: {}
        service_notification_tag:
          name: Service Notification Tag
          description: Tag for service notifications (should be different to notification_tag)
          default: ""
          selector:
            text:
        service_notification_title:
          name: Service Notification Title
          description: Title for service reminder notification
          default: "Service Reminder"
          selector:
            text:
        service_notification_text:
          name: Service Notification Text
          description: Text for service reminder notification
          default: "It's time to clean the filter."
          selector:
            text:
        service_notification_reset_action_title:
          name: Service Notification Reset Action Title
          description: Text for the action of the service reminder notification to reset the counter
          default: "Reset"
          selector:
            text:      
        service_notification_reset_action_name:
          name: Service Notification Reset Action Name
          description: Name/id for the action of the service reminder notification to reset the counter. Must be unique per automation to prevent resetting the wrong counter
          default: "RESET_APPLIANCE_SERVICE_COUNTER"
          selector:
            text:                   
variables:
  power_sensor: !input power_sensor

  appliance_helper: !input appliance_helper

  notification_target: !input notification_target
  notification_channel: !input notification_channel
  notification_tag: !input notification_tag
  notify_start: !input notify_start
  notification_title_start: !input notification_title_start
  notification_text_start: !input notification_text_start
  notify_end: !input notify_end
  notification_title_end: !input notification_title_end
  notification_text_end: !input notification_text_end

  track_duration: !input track_duration
  add_duration_tracking_to_end_notification: !input add_duration_tracking_to_end_notification
  duration_notification_text: !input duration_notification_text

  track_energy: !input track_energy
  energy_sensor: !input energy_sensor
  add_energy_tracking_to_end_notification: !input add_energy_tracking_to_end_notification
  energy_notification_text: !input energy_notification_text

  track_cycles: !input track_cycles
  add_cycle_tracking_to_end_notification: !input add_cycle_tracking_to_end_notification
  cycle_notification_text: !input cycle_notification_text  

  track_service_reminder: !input track_service_reminder
  service_threshold: !input service_threshold
  notify_service_reminder: !input notify_service_reminder
  service_notification_tag: !input service_notification_tag
  service_notification_title: !input service_notification_title
  service_notification_text: !input service_notification_text
  service_notification_reset_action_title: !input service_notification_reset_action_title
  service_notification_reset_action_name: !input service_notification_reset_action_name

trigger:
  - platform: numeric_state
    entity_id: !input power_sensor
    above: !input power_threshold_start
    for:
      minutes: !input start_duration
    id: start
  - platform: numeric_state
    entity_id: !input power_sensor
    below: !input power_threshold_end
    for:
      minutes: !input end_duration
    id: end
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: !input service_notification_reset_action_name
    id: "reset_counter"
condition:
  - condition: template
    value_template: "{{ states(power_sensor) not in ['unknown', 'unavailable'] }}"

mode: restart

action:
  # Initially set helper, if needed
  - service: input_text.set_value
    target:
      entity_id: "{{ appliance_helper }}"
    data:
      value: >-
        {% set helper_json = states(appliance_helper) %}
        {% if helper_json in ['unknown', 'unavailable', None] or helper_json|length == 0 %}
          {% set helper_json = '{}' %}
        {% endif %}
        {% set dict_var = helper_json | from_json %}
        {% set dict_new = dict(dict_var, **{
          'start_time':dict_var.start_time if 'start_time' in dict_var else (now() | as_datetime).isoformat(),
          'end_time':dict_var.end_time if 'end_time' in dict_var and dict_var.end_time is not none else none,
          'start_energy':dict_var.start_energy if 'start_energy' in dict_var else 0 | float,
          'end_energy':dict_var.end_energy if 'end_energy' in dict_var and dict_var.end_energy is not none else none,
          'energy_consumed':dict_var.energy_consumed if 'energy_consumed' in dict_var else none,
          'cycles':dict_var.cycles if 'cycles' in dict_var else 0 | int,
          'last_service':dict_var.last_service if 'last_service' in dict_var else 0 | int
          })
        %}
        {{ dict_new | to_json }}

  - choose:
      # start event
      - conditions:
          - condition: trigger
            id: start
        sequence:
          # track start energy
          - if:
              - condition: template
                value_template: "{{ track_energy == true }}"
            then:                
              - service: input_text.set_value
                target:
                  entity_id: "{{ appliance_helper }}"
                data:
                  value: >-
                    {% set dict_var = states(appliance_helper) | from_json %}
                    {% set dict_new = dict(dict_var, **{
                      'start_time':dict_var.start_time,
                      'end_time':dict_var.end_time,
                      'start_energy':states(energy_sensor) | float(0),
                      'end_energy':dict_var.end_energy,
                      'energy_consumed':dict_var.energy_consumed,       
                      'cycles':dict_var.cycles,
                      'last_service':dict_var.last_service
                      })
                    %}
                    {{ dict_new | to_json }}

          # start notification
          - if:
              - condition: template
                value_template: "{{ notify_start == true }}"
            then:
              - service: "{{ notification_target }}"
                data:
                  message: "{{ notification_text_start }}"
                  title: "{{ notification_title_start }}"
                  data:
                    tag: "{{ notification_tag }}"
                    sticky: false
                    channel: "{{ notification_channel }}"

      # end event
      - conditions:
          - condition: trigger
            id: end
        sequence:
          # save end_time
          - service: input_text.set_value
            target:
              entity_id: "{{ appliance_helper }}"
            data:
              value: >-
                {% set dict_var = states(appliance_helper) | from_json %}
                {% set dict_new = dict(dict_var, **{
                  'start_time':dict_var.start_time,
                  'end_time':(now() | as_datetime).isoformat(),
                  'start_energy':dict_var.start_energy,
                  'end_energy':states(energy_sensor) | float(0),
                  'energy_consumed':dict_var.energy_consumed, 
                  'cycles':(dict_var.cycles|int) + 1,
                  'last_service':dict_var.last_service                      
                  })
                %}
                {{ dict_new | to_json }}

          # track end energy and consumed energy
          - if:
              - condition: template
                value_template: "{{ track_energy == true }}"
            then:                
              - service: input_text.set_value
                target:
                  entity_id: "{{ appliance_helper }}"
                data:
                  value: >-
                    {% set dict_var = states(appliance_helper) | from_json %}
                    {% set dict_new = dict(dict_var, **{
                      'start_time':dict_var.start_time,
                      'end_time':dict_var.end_time,
                      'start_energy':dict_var.start_energy,
                      'end_energy':states(energy_sensor) | float(0),
                      'energy_consumed':(states(energy_sensor) | float(0) - dict_var.start_energy | float(0))|float(0),  
                      'cycles':(dict_var.cycles|int) + 1,
                      'last_service':dict_var.last_service                      
                      })
                    %}
                    {{ dict_new | to_json }}

          # cycles + 1
          - if:
              - condition: template
                value_template: "{{ track_cycles == true }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ appliance_helper }}"
                data:
                  value: >-
                    {% set dict_var = states(appliance_helper) | from_json %}
                    {% set dict_new = dict(dict_var, **{
                      'start_time':dict_var.start_time,
                      'end_time':dict_var.end_time,
                      'start_energy':dict_var.start_energy,
                      'end_energy':dict_var.end_energy,
                      'energy_consumed':dict_var.energy_consumed,  
                      'cycles':(dict_var.cycles|int) + 1,
                      'last_service':dict_var.last_service                      
                      })
                    %}
                    {{ dict_new | to_json }}
          
          # end notification
          - if:
              - condition: template
                value_template: "{{ notify_end == true }}"
            then:
              - service: "{{ notification_target }}"
                data:
                  message: >
                    {% set text = notification_text_end %}
                    {% set dict_var = states(appliance_helper) | from_json %}
                    
                    {% if add_duration_tracking_to_end_notification == true %}
                      {% set duration_seconds = (dict_var.end_time | as_datetime - dict_var.start_time | as_datetime).total_seconds() %}
                      {% set hours = (duration_seconds // 3600) | int %}
                      {% set minutes = ((duration_seconds % 3600) // 60) | int %}
                      {% set seconds = (duration_seconds % 60) | int %}
                      {% set duration = "%02d:%02d:%02d" | format(hours, minutes, seconds) | string %}
                      {% set text = text + '\n' + duration_notification_text + duration %}
                    {% endif %}

                    {% if add_energy_tracking_to_end_notification == true %}
                      {% set energy_consumed = dict_var.energy_consumed | string %}
                      {% set text = text + '\n' + energy_notification_text + energy_consumed + ' kWh' %}
                    {% endif %}

                    {% if track_cycles == true %}
                      {% set cycles = dict_var.cycles | string %}
                      {% set text = text + '\n' + cycle_notification_text + cycles%}
                    {% endif %}

                    {{ text }}

                    {% set message = namespace(text='') %}

                  title: "{{ notification_title_end }}"
                  data:
                    tag: "{{ notification_tag }}"
                    sticky: false
                    channel: "{{ notification_channel }}"

          # service reminder notification
          - if:
              - condition: template
                value_template: >-
                  {% set dict_var = states(appliance_helper) | from_json %}
                  {{ notify_service_reminder == true and (dict_var.cycles|int >= dict_var.last_service|int + service_threshold|int) }}
            then:
              - service: "{{ notification_target }}"
                data:
                  message: "{{ service_notification_text }}"

                  title: "{{ service_notification_title }}"
                  data:
                    tag: "{{ service_notification_tag }}"
                    sticky: false
                    channel: "{{ notification_channel }}"
                    actions:
                      - action: "{{ service_notification_reset_action_name }}"
                        title: "{{ service_notification_reset_action_title }}"

      # reset counter     
      - conditions:
          - condition: trigger
            id: reset_counter
        sequence:
          # set last_service to current cycle
          - service: input_text.set_value
            target:
              entity_id: "{{ appliance_helper }}"
            data:
              value: >-
                {% set dict_var = states(appliance_helper) | from_json %}
                {% set dict_new = dict(dict_var, **{
                  'start_time':dict_var.start_time,
                  'end_time':dict_var.end_time,
                  'start_energy':dict_var.start_energy,
                  'end_energy':dict_var.end_energy,
                  'energy_consumed':dict_var.energy_consumed, 
                  'cycles':dict_var.cycles,
                  'last_service':dict_var.cycles                      
                  })
                %}
                {{ dict_new | to_json }}                    