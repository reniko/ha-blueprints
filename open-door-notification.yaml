blueprint:
  name: Persistent Door Lock Alert
  description: >
    Sends a permanent Android notification to one or more notify services if the door is open or unlocked
    during a specified time window. Clears the notification automatically once the door is both closed and locked.
    Includes a custom message, title, and a Lock Door action button.
  domain: automation
  input:
    lock_entity:
      name: Lock Entity
      description: The smart lock entity to monitor.
      default: lock.haustur
      selector:
        entity:
          domain: lock
    door_sensor:
      name: Door Sensor
      description: Binary sensor that shows if the door is open or closed.
      default: binary_sensor.haustur_door_sensor
      selector:
        entity:
          domain: binary_sensor
    notify_targets:
      name: Notification Services
      description: List of notify service names (one per line, e.g. notify.mobile_app_pixel_6).
      default: |
        notify.parent_notification_group
      selector:
        text:
          multiline: true
    time_start:
      name: Start Time
      description: Start of the time window for monitoring.
      default: "22:00:00"
      selector:
        time: {}
    time_end:
      name: End Time
      description: End of the time window (can be next day).
      default: "06:00:00"
      selector:
        time: {}
    notification_title:
      name: Notification Title
      description: Title of the notification.
      default: "Check the Front Door"
      selector:
        text: {}
    notification_message:
      name: Notification Message
      description: Main message body.
      default: "The door is open or unlocked. Please secure it."
      selector:
        text: {}

mode: single

trigger:
  - platform: state
    entity_id: !input lock_entity
  - platform: state
    entity_id: !input door_sensor

condition:
  - condition: template
    value_template: >
      {% set now_time = now().time() %}
      {% set start = strptime(inputs.time_start, '%H:%M:%S').time() %}
      {% set end = strptime(inputs.time_end, '%H:%M:%S').time() %}
      {% if start < end %}
        {{ start <= now_time <= end }}
      {% else %}
        {{ now_time >= start or now_time <= end }}
      {% endif %}
  - condition: or
    conditions:
      - condition: state
        entity_id: !input lock_entity
        state: "unlocked"
      - condition: state
        entity_id: !input door_sensor
        state: "on"

action:
  - variables:
      notify_services: >
        {% set lines = iif('\n' in inputs.notify_targets, inputs.notify_targets.split('\n'), [inputs.notify_targets]) %}
        {{ lines | map('trim') | reject('equalto', '') | list }}
  - repeat:
      sequence:
        - repeat:
            for_each: "{{ notify_services }}"
            sequence:
              - service: "{{ repeat.item }}"
                data:
                  message: !input notification_message
                  title: !input notification_title
                  data:
                    tag: door_security_alert
                    persistent: true
                    actions:
                      - action: LOCK_DOOR
                        title: "Lock the Door"
      until:
        - condition: and
          conditions:
            - condition: state
              entity_id: !input lock_entity
              state: "locked"
            - condition: state
              entity_id: !input door_sensor
              state: "off"
  - repeat:
      for_each: "{{ notify_services }}"
      sequence:
        - service: "{{ repeat.item }}"
          data:
            message: "The front door is now locked and closed."
            title: "All Secure"
            data:
              tag: door_security_alert
              dismiss: true

alias: Persistent Door Lock Alert
