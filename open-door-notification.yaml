blueprint:
  name: Persistent Door Lock Alert
  description: >
    Sends a persistent Android notification if the door is open, unlocked, or both during a defined
    time window. Messages are fully configurable. Optionally sends a “secure” notification when the
    door is locked and closed. Shows a “Lock Door” action only when the door is unlocked while closed.
  domain: automation

  input:
    lock_entity:
      name: Lock Entity
      default: lock.haustur
      selector:
        entity:
          domain: lock

    door_sensor:
      name: Door Sensor
      default: binary_sensor.haustur_door_sensor
      selector:
        entity:
          domain: binary_sensor

    notify_target:
      name: Notification Service
      default: notify.parent_notification_group
      selector:
        text: {}

    time_start:
      name: Start Time
      default: "22:00:00"
      selector:
        time: {}

    time_end:
      name: End Time
      default: "06:00:00"
      selector:
        time: {}

    notification_title:
      name: Notification Title
      default: "Front Door Alert"
      selector:
        text: {}

    message_door_open:
      name: Message – Door Open
      default: "The door is open. Please close it."
      selector:
        text: {}

    message_door_unlocked:
      name: Message – Door Unlocked
      default: "The door is unlocked. Please lock it."
      selector:
        text: {}

    message_door_open_unlocked:
      name: Message – Door Open & Unlocked
      default: "The door is open and unlocked. Please secure it."
      selector:
        text: {}

    notify_when_secure:
      name: Notify When Secure
      default: true
      selector:
        boolean: {}

    message_secure:
      name: Message – All Secure
      default: "The front door is now locked and closed."
      selector:
        text: {}

mode: single

trigger:
  - platform: state
    entity_id: !input lock_entity
  - platform: state
    entity_id: !input door_sensor

condition:
  - condition: template
    value_template: >
      {% set now_time = now().time() %}
      {% set start = strptime(input.time_start, '%H:%M:%S').time() %}
      {% set end   = strptime(input.time_end,   '%H:%M:%S').time() %}
      {% if start < end %}
        {{ start <= now_time <= end }}
      {% else %}
        {{ now_time >= start or now_time <= end }}
      {% endif %}
  - condition: or
    conditions:
      - condition: state
        entity_id: !input lock_entity
        state: "unlocked"
      - condition: state
        entity_id: !input door_sensor
        state: "on"

variables:
  lock_entity: !input lock_entity
  door_sensor: !input door_sensor

  title: !input notification_title
  message_door_open:            !input message_door_open
  message_door_unlocked:        !input message_door_unlocked
  message_door_open_unlocked:   !input message_door_open_unlocked
  message_secure:               !input message_secure
  notify_when_secure:           !input notify_when_secure

  door_open:      "{{ is_state(door_sensor, 'on') }}"
  door_unlocked:  "{{ is_state(lock_entity, 'unlocked') }}"
  door_closed:    "{{ is_state(door_sensor, 'off') }}"
  show_lock_action: "{{ door_unlocked and door_closed }}"

  alert_message: >
    {% if door_open and door_unlocked %}
      {{ message_door_open_unlocked }}
    {% elif door_open %}
      {{ message_door_open }}
    {% elif door_unlocked %}
      {{ message_door_unlocked }}
    {% else %}
      ""
    {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ show_lock_action }}"
        sequence:
          - service: !input notify_target
            data:
              title: "{{ title }}"
              message: "{{ alert_message }}"
              data:
                tag: door_security_alert
                persistent: true
                actions:
                  - action: LOCK_DOOR
                    title: "Lock the Door"
    default:
      - service: !input notify_target
        data:
          title: "{{ title }}"
          message: "{{ alert_message }}"
          data:
            tag: door_security_alert
            persistent: true

  - wait_for_trigger:
      - platform: state
        entity_id: !input lock_entity
        to: "locked"
      - platform: state
        entity_id: !input door_sensor
        to: "off"

  - wait_template: >
      {{ is_state(lock_entity, 'locked') and is_state(door_sensor, 'off') }}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notify_when_secure }}"
        sequence:
          - service: !input notify_target
            data:
              title: "All Secure"
              message: "{{ message_secure }}"
              data:
                tag: door_security_alert
                dismiss: true
    default:
      - service: !input notify_target
        data:
          message: ""
          data:
            tag: door_security_alert
            dismiss: true

alias: Persistent Door Lock Alert
