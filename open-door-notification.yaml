blueprint:
  name: Persistent Door Lock Alert (v2.0)
  description: >
    Sends a persistent Android notification if the door is open, unlocked, or both during a
    defined time‑window. All texts & titles – including the button text and the final “all
    secure” title – are configurable. Optionally sends a confirmation when the door is locked
    and closed. A “Lock Door” action button (with configurable label) is shown only when the
    door is unlocked while closed. Includes a Home‑Assistant‑start trigger so alerts recover
    automatically after a reboot, and uses “mode: restart” so new triggers cancel any wait.
  domain: automation
  source_url: https://raw.githubusercontent.com/reniko/ha-blueprints/main/open-door-notification.yaml

  input:
    lock_entity:
      name: Lock Entity
      default: lock.haustur
      selector:
        entity:
          domain: lock

    door_sensor:
      name: Door Sensor
      default: binary_sensor.haustur_door_sensor
      selector:
        entity:
          domain: binary_sensor

    notify_target:
      name: Notification Service
      default: notify.parent_notification_group
      selector:
        text: {}

    time_start:
      name: Start Time
      default: "22:00:00"
      selector:
        time: {}

    time_end:
      name: End Time
      default: "06:00:00"
      selector:
        time: {}

    notification_title:
      name: Alert Title
      default: "Front Door Alert"
      selector:
        text: {}

    message_door_open:
      name: Message – Door Open
      default: "The door is open. Please close it."
      selector:
        text: {}

    message_door_unlocked:
      name: Message – Door Unlocked
      default: "The door is unlocked. Please lock it."
      selector:
        text: {}

    message_door_open_unlocked:
      name: Message – Door Open & Unlocked
      default: "The door is open and unlocked. Please secure it."
      selector:
        text: {}

    lock_action_title:
      name: Lock‑Button Text
      default: "Lock the Door"
      selector:
        text: {}

    notify_when_secure:
      name: Notify When Secure
      default: true
      selector:
        boolean: {}

    all_secure_title:
      name: All‑Secure Title
      default: "All Secure"
      selector:
        text: {}

    message_secure:
      name: Message – All Secure
      default: "The front door is now locked and closed."
      selector:
        text: {}

mode: restart

trigger:
  - platform: state
    entity_id: !input lock_entity
  - platform: state
    entity_id: !input door_sensor
  - platform: homeassistant
    event: start

condition:
  # time‑window check (FIXED)
  - condition: template
    value_template: >
      {% set now_time = now().time() %}
      {% set start = strptime(time_start_var, '%H:%M:%S').time() %}
      {% set end   = strptime(time_end_var,   '%H:%M:%S').time() %}
      {% if start < end %}
        {{ start <= now_time <= end }}
      {% else %}
        {{ now_time >= start or now_time <= end }}
      {% endif %}
  # door open OR unlocked
  - condition: or
    conditions:
      - condition: state
        entity_id: !input lock_entity
        state: "unlocked"
      - condition: state
        entity_id: !input door_sensor
        state: "on"

variables:
  # inputs
  lock_entity: !input lock_entity
  door_sensor: !input door_sensor
  time_start_var: !input time_start          # added back
  time_end_var:   !input time_end            # added back

  alert_title:        !input notification_title
  all_secure_title:   !input all_secure_title
  lock_btn_title:     !input lock_action_title
  msg_open:           !input message_door_open
  msg_unlocked:       !input message_door_unlocked
  msg_open_unlocked:  !input message_door_open_unlocked
  msg_secure:         !input message_secure
  notify_when_secure: !input notify_when_secure

  door_open:      "{{ is_state(door_sensor, 'on') }}"
  door_unlocked:  "{{ is_state(lock_entity, 'unlocked') }}"
  door_closed:    "{{ is_state(door_sensor, 'off') }}"
  show_lock_btn:  "{{ door_unlocked and door_closed }}"

  alert_message: >
    {% if door_open and door_unlocked %}
      {{ msg_open_unlocked }}
    {% elif door_open %}
      {{ msg_open }}
    {% elif door_unlocked %}
      {{ msg_unlocked }}
    {% else %}
      ""
    {% endif %}

action:
  - condition: template
    value_template: "{{ alert_message | trim != '' }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ show_lock_btn }}"
        sequence:
          - service: !input notify_target
            data:
              title: "{{ alert_title }}"
              message: "{{ alert_message | trim }}"
              data:
                tag: door_security_alert
                persistent: true
                actions:
                  - action: LOCK_DOOR
                    title: "{{ lock_btn_title }}"
    default:
      - service: !input notify_target
        data:
          title: "{{ alert_title }}"
          message: "{{ alert_message | trim }}"
          data:
            tag: door_security_alert
            persistent: true

  - wait_for_trigger:
      - platform: state
        entity_id: !input lock_entity
        to: "locked"
      - platform: state
        entity_id: !input door_sensor
        to: "off"
  - wait_template: >
      {{ is_state(lock_entity, 'locked') and is_state(door_sensor, 'off') }}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notify_when_secure }}"
        sequence:
          - service: !input notify_target
            data:
              title: "{{ all_secure_title }}"
              message: "{{ msg_secure }}"
              data:
                tag: door_security_alert
                dismiss: true
    default:
      - service: !input notify_target
        data:
          data:
            tag: door_security_alert
            dismiss: true

alias: Persistent Door Lock Alert
