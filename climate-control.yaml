blueprint:
  name: Climate Control
  description: >
    Control a climate entity based on inside and outside temperatures, 
    prioritize PV energy usage, balance with EV charging, and minimize grid energy consumption. Includes preemptive heating if PV is available and cold weather is forecasted.
  domain: automation
  input:
    climate_entity:
      name: Climate Entity
      description: The climate entity to control.
      selector:
        entity:
          domain: climate
    inside_temperature_sensor:
      name: Inside Temperature Sensor (°C)
      description: The sensor that reports the inside temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outside_temperature_sensor:
      name: Outside Temperature Sensor (°C)
      description: The sensor that reports the outside temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather_forecast_max_sensor:
      name: Weather Forecast Max Temperature Sensor (°C)
      description: >
        The sensor providing the forecasted max temperature. This is used to predict cold weather.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    datetime_helper:
      name: datetime helper
      description: Helper sensor suspending next runtime of automation.
      selector:
        entity:
          domain: input_datetime
    pv_surplus_sensor:
      name: PV current available Surplus Sensor (W)
      description: Sensor showing current available PV energy surplus.
      selector:
        entity:
          domain: sensor
          device_class: power
    pv_remaining_surplus_sensor:
      name: PV Remaining Surplus Sensor (kWh)
      description: Sensor showing remaining PV energy surplus for today.
      selector:
        entity:
          domain: sensor
          device_class: energy
    minimum_pv_surplus_for_preemptive_cooling:
      name: Minimum PV Surplus for Climate Control (W) Cooling
      description: >
        Minimum PV energy surplus needed for climate control to use excess energy for cooling.
      default: 500
      selector:
        number:
          min: 100
          max: 5000
          unit_of_measurement: W
    minimum_pv_surplus_for_preemptive_heating:
      name: Minimum PV Surplus for Climate Control (W) Heating
      description: >
        Minimum PV energy surplus needed for climate control to use excess energy for heating.
      default: 500
      selector:
        number:
          min: 100
          max: 5000
          unit_of_measurement: W
    heating_threshold:
      name: Heating Threshold (°C)
      description: The temperature below which heating or ventilation will be triggered.
      default: 10
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C
    preemptive_heating_threshold:
      name: Preemptive heating threshold (°C)
      description: The temperature below which preemptive heating could be triggered.
      default: 18
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C
    preemptive_heating_stop_threshold:
      name: Stop threshold for preemptive heating  (°C)
      description: The temperature above which preemptive heating won't be triggered.
      default: 26
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C          
    heating_temperature:
      name: temperature for heating (°C)
      description: Used as temperature for heating.
      default: 20
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C
    cooling_temperature:
      name: temperature for cooling (°C)
      description: Used as temperature for cooling.
      default: 26
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C
    preemptive_cooling_threshold:
      name: Preemptive cooling threshold (°C)
      description: The temperature above which preemptive cooling could be triggered.
      default: 28
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C    
    preemptive_cooling_stop_threshold:
      name: Stop threshold for preemptive cooling (°C)
      description: The temperature below which preemptive cooling won't be triggered.
      default: 20
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C             
    cooling_threshold:
      name: Cooling Threshold (°C)
      description: The temperature above which cooling or ventilation will be triggered.
      default: 30
      selector:
        number:
          min: 0
          max: 40
          unit_of_measurement: °C

    change_frequency:
      name: Delay in minutes after an adjustment until a new adjustment is done
      description: Minutes will be added to the actual time. Next adjustment will be done after this amount of minutes.
      default: 15
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: min

#heating_threshold 10
#preemptive_heating_threshold 18
#heating_temperature 20
#preemptive_heating_stop_threshold 26

#preemptive_cooling_stop_threshold 20
#cooling_temperature 26
#preemptive_cooling_threshold 28
#cooling_threshold 30

variables:
  inside_temperature_sensor: !input inside_temperature_sensor
  outside_temperature_sensor: !input outside_temperature_sensor
  weather_forecast_max_sensor: !input weather_forecast_max_sensor
  pv_surplus_sensor: !input pv_surplus_sensor
  pv_remaining_surplus_sensor: !input pv_remaining_surplus_sensor
  minimum_pv_surplus_for_preemptive_cooling: !input minimum_pv_surplus_for_preemptive_cooling
  minimum_pv_surplus_for_preemptive_heating: !input minimum_pv_surplus_for_preemptive_heating
  cooling_threshold: !input cooling_threshold
  preemptive_cooling_threshold: !input preemptive_cooling_threshold
  preemptive_cooling_stop_threshold: !input preemptive_cooling_stop_threshold
  cooling_temperature: !input cooling_temperature
  heating_temperature: !input heating_temperature
  preemptive_heating_threshold: !input preemptive_heating_threshold
  preemptive_heating_stop_threshold: !input preemptive_heating_stop_threshold
  heating_threshold: !input heating_threshold
  datetime_helper: !input datetime_helper
  change_frequency: !input change_frequency

trigger:
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  - platform: time
    at: !input datetime_helper

condition:
  - condition: time
    after: !input datetime_helper

action:
  - choose:
      # Condition 0: Inside temperature is below the heating threshold -> Heating or ventilation
      - conditions:
          - condition: template
            value_template: "{{ (states(inside_temperature_sensor)|float(18)) <= heating_threshold }}"
        sequence:
          - choose:
              # Sub-condition 0: Prioritize ventilation if outside temperature is high enough
              - conditions:
                  - condition: template
                    value_template: "{{ (states(outside_temperature_sensor)|float(18)) >= preemptive_heating_threshold }}"
                sequence:
                  - action: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: 'fan_only'
                  - action: logbook.log
                    data:
                      name: "Climate Control"
                      message: "Inside: low ({{(states(inside_temperature_sensor))}}). Outside: high ({{(states(outside_temperature_sensor))}}) -> Mode: fan."
                      entity_id: !input climate_entity
            # Condition 0 default: Heating needed
            default:
              - action: climate.set_temperature
                target:
                  entity_id: !input climate_entity
                data:
                  hvac_mode: 'heat'
                  temperature: "{{ heating_temperature }}"
              - action: climate.set_fan_mode
                target:
                  entity_id: !input climate_entity
                data:
                  fan_mode: auto
              - action: logbook.log
                data:
                  name: "Climate Control"
                  message: "Inside: low ({{(states(inside_temperature_sensor))}}) -> Mode: heat."
                  entity_id: !input climate_entity

      # Condition 1: Inside temperature is above the cooling threshold -> Cooling or ventilation
      - conditions:
          - condition: template
            value_template: "{{ (states(inside_temperature_sensor)|float(18)) >= cooling_threshold }}"
        sequence:
          - choose:
              # Sub-condition 0: Prioritize ventilation if outside temperature is low enough
              - conditions:
                  - condition: template
                    value_template: "{{ (states(outside_temperature_sensor)|float(18)) <= preemptive_cooling_threshold }}"
                sequence:
                  - action: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: 'fan_only'
                  - action: logbook.log
                    data:
                      name: "Climate Control"
                      message: "Inside: high ({{(states(inside_temperature_sensor))}}). Outside: low ({{(states(outside_temperature_sensor))}}) -> Mode: fan."
                      entity_id: !input climate_entity
            # Condition 1 default: Cooling needed
            default:
              - action: climate.set_temperature
                target:
                  entity_id: !input climate_entity
                data:
                  hvac_mode: 'cool'
                  temperature: "{{ cooling_temperature }}"
              - action: climate.set_fan_mode
                target:
                  entity_id: !input climate_entity
                data:
                  fan_mode: auto
              - action: logbook.log
                data:
                  name: "Climate Control"
                  message: "Inside: high ({{(states(inside_temperature_sensor))}}) -> Mode: cool."
                  entity_id: !input climate_entity

      # Condition 2: Inside temperature is between heating and cooling thresholds -> Ventilation or Cooling/Heating based on PV surplus
      - conditions:
          - condition: template
            value_template: "{{ (states(inside_temperature_sensor)|float(18)) > heating_threshold }}"
          - condition: template
            value_template: "{{ (states(inside_temperature_sensor)|float(18)) < cooling_threshold }}"
        sequence:
          - choose:
              # Sub-condition 0: Inside temperature lower than preemptive heating treshold: preemptive heating could be usefull
              - conditions:
                  - condition: template
                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) < preemptive_heating_threshold }}"
                sequence:
                  - choose:
                      # Sub-sub-condition 0: Preemptive heating with fan if outside temperature is higher than preemptive heating threshold
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) > preemptive_heating_threshold }}"                  
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) > (states(inside_temperature_sensor)|float(18)) }}"
                        sequence:
                          - action: climate.set_hvac_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'fan_only'
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: lower than preemptive heating ({{(states(inside_temperature_sensor))}}). Outside: high ({{(states(outside_temperature_sensor))}}) --> Mode: fan.."
                              entity_id: !input climate_entity
                      # Sub-sub-condition 1: Heating if enough PV surplus available
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(pv_surplus_sensor)|float(0)) >= minimum_pv_surplus_for_preemptive_heating }}"
                          - condition: template
                            value_template: "{{ states(pv_remaining_surplus_sensor)|float(0) * 1000 > (minimum_pv_surplus_for_preemptive_heating*change_frequency)/60 }}"
                        sequence:
                          - action: climate.set_temperature
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'heat'
                              temperature: "{{ heating_temperature }}"
                          - action: climate.set_fan_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              fan_mode: auto
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: lower than preemptive heating ({{(states(inside_temperature_sensor))}}). Surplus: available ({{(states(pv_surplus_sensor))}}) -> Mode: heat."
                              entity_id: !input climate_entity
                      # Sub-sub-condition 2: Preemptive heating with fan but without surplus and high outside temperature (better than nothing)
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) > (states(inside_temperature_sensor)|float(18)) }}"
                        sequence:
                          - action: climate.set_hvac_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'fan_only'
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: lower than preemptive heating ({{(states(inside_temperature_sensor))}}). Outside: medium ({{(states(outside_temperature_sensor))}}) --> Mode: fan.."
                              entity_id: !input climate_entity
                    # Sub condition 0 default: Preemptive heating not possible. Switch off
                    default:
                      - action: climate.set_hvac_mode
                        target:
                          entity_id: !input climate_entity
                        data:
                          hvac_mode: 'off'
                      - action: logbook.log
                        data:
                          name: "Climate Control"
                          message: "Inside: lower than preemptive heating ({{(states(inside_temperature_sensor))}}). Preemptive heating not possible --> Mode: off."
                          entity_id: !input climate_entity

              # Sub-condition 1: Inside temperature higher than preemptive cooling treshold: preemptive cooling could be usefull
              - conditions:
                  - condition: template
                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) > preemptive_cooling_threshold }}"
                sequence:
                  - choose:
                      # Sub-sub-condition 0: Preemptive cooling with fan if outside temperature is lower than preemptive cooling threshold
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) < preemptive_cooling_threshold }}"                  
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) < (states(inside_temperature_sensor)|float(18)) }}"
                        sequence:
                          - action: climate.set_hvac_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'fan_only'
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: higher than preemptive cooling ({{(states(inside_temperature_sensor))}}). Outside: low ({{(states(outside_temperature_sensor))}}) --> Mode: fan.."
                              entity_id: !input climate_entity
                      # Sub-sub-condition 1: Cooling if enough PV surplus available
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(pv_surplus_sensor)|float(0)) >= minimum_pv_surplus_for_preemptive_cooling }}"
                          - condition: template
                            value_template: "{{ states(pv_remaining_surplus_sensor)|float(0) * 1000 > (minimum_pv_surplus_for_preemptive_cooling*change_frequency)/60 }}"
                        sequence:
                          - action: climate.set_temperature
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'cool'
                              temperature: "{{ cooling_temperature }}"
                          - action: climate.set_fan_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              fan_mode: auto
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: higher than preemptive cooling ({{(states(inside_temperature_sensor))}}). Surplus: available ({{(states(pv_surplus_sensor))}}) -> Mode: cool."
                              entity_id: !input climate_entity
                      # Sub-sub-condition 2: Preemptive cooling with fan but without surplus and low outside temperature (better than nothing)
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(outside_temperature_sensor)|float(18)) < (states(inside_temperature_sensor)|float(18)) }}"
                        sequence:
                          - action: climate.set_hvac_mode
                            target:
                              entity_id: !input climate_entity
                            data:
                              hvac_mode: 'fan_only'
                          - action: logbook.log
                            data:
                              name: "Climate Control"
                              message: "Inside: higher than preemptive cooling ({{(states(inside_temperature_sensor))}}). Outside: medium ({{(states(outside_temperature_sensor))}}) --> Mode: fan.."
                              entity_id: !input climate_entity
                    # Sub condition 0 default: Preemptive cooling not possible. Switch off
                    default:
                      - action: climate.set_hvac_mode
                        target:
                          entity_id: !input climate_entity
                        data:
                          hvac_mode: 'off'
                      - action: logbook.log
                        data:
                          name: "Climate Control"
                          message: "Inside: higher than preemptive cooling ({{(states(inside_temperature_sensor))}}). Preemptive cooling not possible --> Mode: off."
                          entity_id: !input climate_entity

              # Sub-condition 2: Inside temperature between preemptive cooling and preemptive heating treshold: preemptive cooling or heating could be usefull
              - conditions:
                  - condition: template
                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) >= preemptive_heating_threshold }}"
                  - condition: template
                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) <= preemptive_cooling_threshold }}"
                sequence:
                  - choose:
                      # SubSub-condition 0: Temperature forecast above preemptive cooling threshold: preemptive cooling could be usefull
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(weather_forecast_max_sensor)|float(18)) >= preemptive_cooling_threshold }}"
                        sequence:
                          - choose:
                              # SubSubSub-condition 0: Cooling if enough PV surplus available
                              - conditions:
                                  - condition: template
                                    value_template: "{{ (states(pv_surplus_sensor)|float(0)) >= minimum_pv_surplus_for_preemptive_cooling }}"
                                  - condition: template
                                    value_template: "{{ states(pv_remaining_surplus_sensor)|float(0) * 1000 > (minimum_pv_surplus_for_preemptive_cooling*change_frequency)/60 }}"
                                  - condition: template
                                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) > preemptive_cooling_stop_threshold }}"                                    
                                sequence:
                                  - action: climate.set_temperature
                                    target:
                                      entity_id: !input climate_entity
                                    data:
                                      hvac_mode: 'cool'
                                      temperature: "{{ cooling_temperature }}"
                                  - action: climate.set_fan_mode
                                    target:
                                      entity_id: !input climate_entity
                                    data:
                                      fan_mode: auto                                      
                                  - action: logbook.log
                                    data:
                                      name: "Climate Control"
                                      message: "Inside: ok ({{(states(inside_temperature_sensor))}}). Forecast: high ({{(states(weather_forecast_max_sensor))}}). Surplus: available ({{(states(pv_surplus_sensor))}}) -> Mode: cool."
                                      entity_id: !input climate_entity
                            # SubSub Condition 0 default: Preemptive cooling not possible. Switch off
                            default:
                              - action: climate.set_hvac_mode
                                target:
                                  entity_id: !input climate_entity
                                data:
                                  hvac_mode: 'off'
                              - action: logbook.log
                                data:
                                  name: "Climate Control"
                                  message: "Inside: ok ({{(states(inside_temperature_sensor))}}). Forecast: high ({{(states(weather_forecast_max_sensor))}}). Preemptive cooling not possible --> Mode: off."
                                  entity_id: !input climate_entity

                      # SubSub-condition 1: Temperature forecast below preemptive heating threshold: preemptive heating could be usefull
                      - conditions:
                          - condition: template
                            value_template: "{{ (states(weather_forecast_max_sensor)|float(18)) <= preemptive_heating_threshold }}"
                        sequence:
                          - choose:
                              # SubSubSub-condition 0: Heating if enough PV surplus available
                              - conditions:
                                  - condition: template
                                    value_template: "{{ (states(pv_surplus_sensor)|float(0)) >= minimum_pv_surplus_for_preemptive_heating }}"
                                  - condition: template
                                    value_template: "{{ states(pv_remaining_surplus_sensor)|float(0) * 1000 > (minimum_pv_surplus_for_preemptive_heating*change_frequency)/60 }}"
                                  - condition: template
                                    value_template: "{{ (states(inside_temperature_sensor)|float(18)) < preemptive_heating_stop_threshold }}"
                                sequence:
                                  - action: climate.set_temperature
                                    target:
                                      entity_id: !input climate_entity
                                    data:
                                      hvac_mode: 'heat'
                                      temperature: "{{ heating_temperature }}"
                                  - action: climate.set_fan_mode
                                    target:
                                      entity_id: !input climate_entity
                                    data:
                                      fan_mode: auto                                      
                                  - action: logbook.log
                                    data:
                                      name: "Climate Control"
                                      message: "Inside: ok ({{(states(inside_temperature_sensor))}}). Forecast: low ({{(states(weather_forecast_max_sensor))}}). Surplus: available ({{(states(pv_surplus_sensor))}}) -> Mode: heat."
                                      entity_id: !input climate_entity
                            # SubSub Condition 0 default: Preemptive heating not possible. Switch off
                            default:
                              - action: climate.set_hvac_mode
                                target:
                                  entity_id: !input climate_entity
                                data:
                                  hvac_mode: 'off'
                              - action: logbook.log
                                data:
                                  name: "Climate Control"
                                  message: "Inside: ok ({{(states(inside_temperature_sensor))}}). Forecast: low ({{(states(weather_forecast_max_sensor))}}). Preemptive heating not possible --> Mode: off."
                                  entity_id: !input climate_entity

                    # Sub condition 2 default: Preemptive heating/cooling not possible. Switch off
                    default:
                      - action: climate.set_hvac_mode
                        target:
                          entity_id: !input climate_entity
                        data:
                          hvac_mode: 'off'
                      - action: logbook.log
                        data:
                          name: "Climate Control"
                          message: "Inside: ok ({{(states(inside_temperature_sensor))}}). Forecast: ok ({{(states(weather_forecast_max_sensor))}}). Preemptive heating/cooling not possible --> Mode: off."
                          entity_id: !input climate_entity

            # Condition 2 default: Preemptive heating/cooling not possible. Switch off
            default:
              - action: climate.set_hvac_mode
                target:
                  entity_id: !input climate_entity
                data:
                  hvac_mode: 'off'
              - action: logbook.log
                data:
                  name: "Climate Control"
                  message: "Preemptive default selected. Inside: ok ({{(states(inside_temperature_sensor))}}) -> Mode: off."
                  entity_id: !input climate_entity

    # Default
    default:
      - action: climate.set_hvac_mode
        target:
          entity_id: !input climate_entity
        data:
          hvac_mode: 'off'
      - action: logbook.log
        data:
          name: "Climate Control"
          message: "Default selected. Climate mode switched to off."
          entity_id: !input climate_entity
          
  - action: input_datetime.set_datetime
    target:
      entity_id: !input datetime_helper
    data:
      timestamp: "{{ now().timestamp() + (change_frequency*60) }}"
