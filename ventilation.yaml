# Home Assistant Blueprint â€“ Ventilation Recommendation (per room)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room
# using indoor/outdoor sensor readings, heating state, comfort threshold,
# optional weather forecast **and** an optional time window (e.g. no
# ventilation recommendations at night for groundâ€‘floor rooms).
# Sends its decision to an input_boolean helper and can (optionally)
# push notifications to a Homeâ€‘Assistant *notification group* only when the
# recommendation changes.
# -----------------------------------------------------------------
# VERSION: 0.3.0Â Â (2025â€‘05â€‘19)
# -----------------------------------------------------------------

blueprint:
  name: Ventilation Recommendation (forecastÂ + timeÂ window)
  description: >
    Recommend window ventilation for a single room.  
    Criteria: Î”T, dewâ€‘point, comfort range, heating state, (optional)
    enthalpy, forecast, time window and window sensors. The automation
    writes its decision to an *input_boolean* and notifies a HA
    *notification group* only when the recommendation changes.
  domain: automation
  source_url: https://github.com/<your_repo>/ventilation_recommendation.yaml
  version: "0.3.0"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# INPUTS
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
input:
  room_slug:
    name: RoomÂ Slug (no spaces)
    selector:
      text:
  # â”€ Sensors â”€
  temp_in:
    name: Indoor Temperature Sensor
    selector:
      entity:
        domain: sensor
  temp_out:
    name: Outdoor Temperature Sensor
    selector:
      entity:
        domain: sensor
  dew_in:
    name: Indoor Dewâ€‘Point Sensor
    selector:
      entity:
        domain: sensor
  dew_out:
    name: Outdoor Dewâ€‘Point Sensor
    selector:
      entity:
        domain: sensor
  enthalpy_in:
    name: Indoor Enthalpy Sensor (optional)
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  enthalpy_out:
    name: Outdoor Enthalpy Sensor (optional)
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  press_in:
    name: Indoor Pressure Sensor (optional)
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  press_out:
    name: Outdoor Pressure Sensor (optional)
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  forecast_low:
    name: Forecast Nightâ€‘Minimum Temperature (optional)
    default: ""
    selector:
      entity:
        domain: sensor
  forecast_high:
    name: Forecast Dayâ€‘Maximum Temperature (optional)
    default: ""
    selector:
      entity:
        domain: sensor
  # â”€ Window sensors (optional) â”€
  window_sensors:
    name: Window Sensors (optional, multiple)
    description: Will be used for open/close reminders.
    default: []
    selector:
      entity:
        domain: binary_sensor
        device_class: window
        multiple: true

  # â”€ Helpers / outputs â”€
  heating_active:
    name: Heatingâ€‘State Helper / Climate entity
    description: Boolean (`on`Â =Â heating) or climate device (`hvac_mode != 'off'`).
    selector:
      entity:
  recommendation_boolean:
    name: Output Helper (input_boolean)
    selector:
      entity:
        domain: input_boolean
  notify_group:
    name: Notification Group (notify.<group>) â€“ optional
    default: ""
    selector:
      text:

  # â”€ Thresholds â”€
  comfort_max:
    name: Comfort Upper Temperature (Â°C)
    default: 25
    selector:
      number:
        min: 10
        max: 35
        step: 0.5
  min_temp_diff:
    name: Minimum Temperature Difference (Â°C)
    default: 2
    selector:
      number:
        min: 0
        max: 10
        step: 0.5

  # â”€ Time window â”€
  allow_night:
    name: Allow Night Ventilation
    description: >
      If *false*, recommendations will only be sent between the time range
      below (useful for groundâ€‘floor rooms).
    default: true
    selector:
      boolean:
  time_start:
    name: Earliest Recommendation Time
    default: "06:00:00"
    selector:
      time:
  time_end:
    name: Latest Recommendation Time
    default: "22:00:00"
    selector:
      time:

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# VARIABLES
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
variables:
  # Inputs
  room_slug: !input room_slug
  # Sensors & helpers
  temp_in: !input temp_in
  temp_out: !input temp_out
  dew_in: !input dew_in
  dew_out: !input dew_out
  enthalpy_in: !input enthalpy_in
  enthalpy_out: !input enthalpy_out
  press_in: !input press_in
  press_out: !input press_out
  forecast_low: !input forecast_low
  forecast_high: !input forecast_high
  window_sensors: !input window_sensors
  heating_active: !input heating_active
  recommendation_boolean: !input recommendation_boolean
  notify_group: !input notify_group
  # Thresholds / time
  comfort_max: !input comfort_max
  min_temp_diff: !input min_temp_diff
  allow_night: !input allow_night
  time_start: !input time_start
  time_end: !input time_end

  # Current sensor readings (helper "float" to avoid errors on "unknown")
  t_in: "{{ states(temp_in) | float(99) }}"
  t_out: "{{ states(temp_out) | float(99) }}"
  d_in: "{{ states(dew_in) | float(99) }}"
  d_out: "{{ states(dew_out) | float(99) }}"
  e_in: "{{ states(enthalpy_in) | float(0) }}"
  e_out: "{{ states(enthalpy_out) | float(0) }}"
  p_in: "{{ states(press_in) | float(0) }}"
  p_out: "{{ states(press_out) | float(0) }}"
  f_low: "{{ states(forecast_low) | float(99) }}"
  f_high: "{{ states(forecast_high) | float(-99) }}"

  # Basic condition checks
  temp_ok: "{{ t_out < (t_in - min_temp_diff) }}"
  dew_ok: "{{ d_out < d_in }}"
  enthalpy_ok: "{{ e_out < e_in if enthalpy_out else true }}"
  comfort_ok: "{{ t_in > comfort_max }}"
  heating_off: "{{ states(heating_active) in ['off','false','0','standby','idle','cool','dry'] }}"
  forecast_low_ok: "{{ f_low < (t_in - min_temp_diff) if forecast_low else true }}"
  forecast_high_ok: "{{ f_high > t_in if forecast_high else true }}"
  pressure_ok: "{{ (p_in - p_out)|abs > 2 if (press_in and press_out) else true }}"
  # Time window
  time_allowed: >
    {% if allow_night %}true{% else %}
      {% set now_str = now().strftime('%H:%M:%S') %}
      {{ time_start <= now_str <= time_end }}
    {% endif %}
  # Combined decision
  should_ventilate: >
    {{ temp_ok and dew_ok and enthalpy_ok and comfort_ok and heating_off
       and forecast_low_ok and forecast_high_ok and pressure_ok and time_allowed }}

  any_window_open: >
    {% set open = false %}
    {% for w in window_sensors %}{% if is_state(w,'on') %}{% set open = true %}{% endif %}{% endfor %}
    {{ open }}
  recommendation_current: "{{ states(recommendation_boolean) }}"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# TRIGGERS â€“ sensor changes & 15â€‘min heartbeat
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
trigger:
  - platform: state
    entity_id:
      - !input temp_in
      - !input temp_out
      - !input dew_in
      - !input dew_out
      - !input enthalpy_in
      - !input enthalpy_out
      - !input heating_active
      - !input forecast_low
      - !input forecast_high
      - !input window_sensors
    for:
      minutes: 2
  - platform: time_pattern
    minutes: "/15"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ACTIONS
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
action:
  - choose:
      # â”€â”€â”€ Turn recommendation ON â”€â”€â”€
      - conditions: "{{ should_ventilate and recommendation_current == 'off' }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ recommendation_boolean }}"
          - if:
              - condition: template
                value_template: "{{ notify_group != '' }}"
            then:
              - service: "{{ notify_group }}"
                data:
                  message: >
                    {% if any_window_open %}
                      ðŸ’¨ LÃ¼ftung passt â€“ Fenster im Raum {{ room_slug | replace('_',' ') }} sind bereits offen.
                    {% else %}
                      ðŸ’¨ LÃ¼ften empfohlen im Raum {{ room_slug | replace('_',' ') }} â€“ bitte Fenster Ã¶ffnen.
                    {% endif %}
      # â”€â”€â”€ Turn recommendation OFF â”€â”€â”€
      - conditions: "{{ (not should_ventilate) and recommendation_current == 'on' }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ recommendation_boolean }}"
          - if:
              - condition: template
                value_template: "{{ notify_group != '' and any_window_open }}"
            then:
              - service: "{{ notify_group }}"
                data:
                  message: "ðŸªŸ Bitte Fenster im Raum {{ room_slug | replace('_',' ') }} schlieÃŸen â€“ LÃ¼ftung nicht mehr vorteilhaft."
mode: restart
