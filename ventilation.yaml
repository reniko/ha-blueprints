# Ventilation Recommendation (forecast + time window, v0.4.2)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T, Î”Taupunkt
# - Optional: Enthalpy, Forecast (high/low), Timeâ€‘window
# - Avoids night ventilation if allow_night = false
# - Writes to an input_boolean and (optionally) pushes a notification
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + time window, v0.4.2)
  description: >
    Recommends manual window ventilation for a single room based on
    indoor/outdoor sensors, heating state, configurable comfort limits,
    optional weather forecast and an optional time window.
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml

  input:
    room_slug:
      name: Room name (slug)
      description: Short name without spaces (e.g. "Wohnzimmer"). Used in messages.
      selector:
        text:

    # --- Core sensors -------------------------------------------------------
    temp_in:
      name: Indoor temperature sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temp_out:
      name: Outdoor temperature sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    dew_in:
      name: Indoor dewâ€‘point sensor
      selector:
        entity:
          domain: sensor
    dew_out:
      name: Outdoor dewâ€‘point sensor
      selector:
        entity:
          domain: sensor

    # --- Optional sensors ----------------------------------------------------
    enthalpy_in:
      name: Indoor enthalpy sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    enthalpy_out:
      name: Outdoor enthalpy sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_high:
      name: Forecast dayâ€‘high temperature sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_low:
      name: Forecast nightâ€‘low temperature sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    # Pressure placeholders (unused, for backâ€‘compat) -----------------------
    press_in:
      name: (unused) Indoor pressure sensor â€“ ignored
      default: ""
      selector:
        entity:
          domain: sensor
    press_out:
      name: (unused) Outdoor pressure sensor â€“ ignored
      default: ""
      selector:
        entity:
          domain: sensor

    # --- Comfort & thresholds ----------------------------------------------
    min_temp_diff:
      name: Minimum temperature difference (Â°C)
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: Â°C
    comfort_max:
      name: Maximum comfortable indoor temperature (Â°C)
      default: 25
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
          unit_of_measurement: Â°C

    # --- Time window / night block -----------------------------------------
    allow_night:
      name: Allow night ventilation
      description: If off, recommendations only between the two times below.
      default: true
      selector:
        boolean:
    time_start:
      name: Earliest ventilation time
      default: "06:00:00"
      selector:
        time:
    time_end:
      name: Latest ventilation time
      default: "22:00:00"
      selector:
        time:

    # --- Window sensors & heating ------------------------------------------
    window_sensors:
      name: Window contact sensors (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true
    heating_active:
      name: Helper or climate entity indicating heating active (on/off)
      selector:
        entity:
    recommendation_boolean:
      name: Target input_boolean that stores the recommendation
      selector:
        entity:
          domain: input_boolean
    notify_group:
      name: Notify service (e.g. notify.mobile_app_pixel or notify.admin_notification_group) (optional)
      default: ""
      selector:
        text:

    # --- Debug --------------------------------------------------------------
    debug_log:
      name: Write debug info to system_log
      default: false
      selector:
        boolean:

# ---------------------------------------------------------------------------
# Automation definition starts here â€“ DO NOT WRAP IN an extra 'automation:' key
# ---------------------------------------------------------------------------
mode: single

variables:
  room: !input room_slug

  # thresholds & flags
  min_tempdiff: !input min_temp_diff
  comfort_max: !input comfort_max
  allow_night: !input allow_night
  start_time: !input time_start
  end_time: !input time_end
  notify_target: !input notify_group
  debug_on: !input debug_log

  # Entity IDs
  temp_in_entity: !input temp_in
  temp_out_entity: !input temp_out
  dew_in_entity: !input dew_in
  dew_out_entity: !input dew_out
  enth_in_entity: !input enthalpy_in
  enth_out_entity: !input enthalpy_out
  f_high_entity: !input forecast_high
  f_low_entity: !input forecast_low
  heating_entity: !input heating_active
  rec_bool_entity: !input recommendation_boolean

  # Current sensor values --------------------------------------------------
  temp_in: "{{ states(temp_in_entity) | float }}"
  temp_out: "{{ states(temp_out_entity) | float }}"
  dew_in: "{{ states(dew_in_entity) | float }}"
  dew_out: "{{ states(dew_out_entity) | float }}"
  enth_in: "{{ states(enth_in_entity) | float if enth_in_entity else 0 }}"
  enth_out: "{{ states(enth_out_entity) | float if enth_out_entity else 0 }}"
  f_high: "{{ states(f_high_entity) | float if f_high_entity else -99 }}"
  f_low: "{{ states(f_low_entity) | float if f_low_entity else 99 }}"
  heating_on: "{{ is_state(heating_entity, 'on') }}"
  current_time: "{{ now().strftime('%H:%M:%S') }}"

  # Logical checks ---------------------------------------------------------
  timeframe_ok: >
    {% if not allow_night %}
      {{ start_time <= current_time < end_time }}
    {% else %} true {% endif %}
  temp_ok: "{{ temp_out < (temp_in - (min_tempdiff | float)) }}"
  dew_ok: "{{ dew_out < dew_in }}"
  enth_ok: >
    {% if enth_in_entity and enth_out_entity %}
      {{ enth_out < enth_in }}
    {% else %} true {% endif %}
  forecast_ok: >
    {% if f_high_entity and f_low_entity %}
      {{ (f_low < comfort_max) and (f_high > temp_in) }}
    {% else %} true {% endif %}
  should_ventilate: "{{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and not heating_on }}"

# -------------------------------------------------------------------------
trigger:
  - platform: state
    entity_id:
      - !input temp_out
      - !input temp_in
      - !input dew_out
      - !input dew_in
      - !input heating_active
  - platform: time_pattern
    minutes: "/10"

condition: []

action:
  - choose:
      - conditions: "{{ should_ventilate and is_state(rec_bool_entity, 'off') }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input recommendation_boolean
          - choose:
              - conditions: "{{ notify_target != '' }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸ’¨ Bitte {{ room }} lÃ¼ften (Fenster Ã¶ffnen)."
      - conditions: "{{ (not should_ventilate) and is_state(rec_bool_entity, 'on') }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: !input recommendation_boolean
          - choose:
              - conditions: "{{ notify_target != '' }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸªŸ Bitte Fenster in {{ room }} schlieÃŸen."

  - choose:
      - conditions: "{{ debug_on }}"
        sequence:
          - service: logbook.log
            data:
              name: "Ventilation Debug"
              message: >
                Î”T-OK {{ temp_ok }} | Tau-OK {{ dew_ok }} |
                Enth-OK {{ enth_ok }} | Forecast-OK {{ forecast_ok }} |
                Zeit-OK {{ timeframe_ok }} | Heizung {{ 'AN' if heating_on else 'AUS' }} â†’
                LÃ¼ften {{ 'JA' if should_ventilate else 'NEIN' }}
              entity_id: "{{ rec_bool_entity }}"
