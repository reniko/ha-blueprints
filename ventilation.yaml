# Ventilation Recommendation (forecast + time window, v0.3.5)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T, Î”Taupunkt
# - Optional: Enthalpy, Forecast (high/low), Timeâ€‘window
# - Avoids night ventilation if allow_night = false
# - Writes to an input_boolean and (optionally) pushes a notification
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + time window, v0.3.5)
  description: >
    Recommends manual window ventilation for a single room based on
    indoor/outdoor sensors, heating state, configurable comfort limits,
    optional weather forecast and an optional time window.
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml

  input:
    room_slug:
      name: Room name (slug)
      description: Short name without spaces (e.g. "Wohnzimmer"). Used in messages.
      selector:
        text:
    # --- Core sensors -------------------------------------------------------
    temp_in:
      name: Indoor temperature sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temp_out:
      name: Outdoor temperature sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    dew_in:
      name: Indoor dewâ€‘point sensor
      selector:
        entity:
          domain: sensor
    dew_out:
      name: Outdoor dewâ€‘point sensor
      selector:
        entity:
          domain: sensor
    # --- Optional sensors ----------------------------------------------------
    enthalpy_in:
      name: Indoor enthalpy sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
          multiple: false
    enthalpy_out:
      name: Outdoor enthalpy sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
          multiple: false
    forecast_high:
      name: Forecast dayâ€‘high temperature sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_low:
      name: Forecast nightâ€‘low temperature sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    # --- Comfort & thresholds ----------------------------------------------
    min_temp_diff:
      name: Minimum temperature difference (Â°C)
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: Â°C
    comfort_max:
      name: Maximum comfortable indoor temperature (Â°C)
      default: 25
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
          unit_of_measurement: Â°C
    # --- Time window / night block -----------------------------------------
    allow_night:
      name: Allow night ventilation
      description: If off, recommendations only between the two times below.
      default: true
      selector:
        boolean:
    time_start:
      name: Earliest ventilation time
      default: "06:00:00"
      selector:
        time:
    time_end:
      name: Latest ventilation time
      default: "22:00:00"
      selector:
        time:
    # --- Window sensors & heating ------------------------------------------
    window_sensors:
      name: Window contact sensors (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true
    heating_active:
      name: Helper or climate entity indicating heating active (on/off)
      selector:
        entity:
    recommendation_boolean:
      name: Target input_boolean that stores the recommendation
      selector:
        entity:
          domain: input_boolean
    notify_group:
      name: Notify target (mobile app / group) (optional)
      default: ""
      selector:
        text:
    # --- Debug --------------------------------------------------------------
    debug_log:
      name: Write debug info to system_log
      default: false
      selector:
        boolean:

# ---------------------------------------------------------------------------
automation:
  mode: single
  variables:
    room: !input room_slug
    # ---- numeric thresholds ------------------------------------------------
    min_tempdiff: "{{ !input min_temp_diff | float }}"
    comfort_max: "{{ !input comfort_max | float }}"
    # ---- sensor values -----------------------------------------------------
    temp_in: "{{ states('!input temp_in') | float }}"
    temp_out: "{{ states('!input temp_out') | float }}"
    dew_in: "{{ states('!input dew_in') | float }}"
    dew_out: "{{ states('!input dew_out') | float }}"
    enth_in: >
      {% if '!input enthalpy_in' != '' %}
        {{ states('!input enthalpy_in') | float }}
      {% else %} 0 {% endif %}
    enth_out: >
      {% if '!input enthalpy_out' != '' %}
        {{ states('!input enthalpy_out') | float }}
      {% else %} 0 {% endif %}
    f_high: >
      {% if '!input forecast_high' != '' %}
        {{ states('!input forecast_high') | float }}
      {% else %} -99 {% endif %}
    f_low: >
      {% if '!input forecast_low' != '' %}
        {{ states('!input forecast_low') | float }}
      {% else %} 99 {% endif %}
    heating_on: "{{ is_state('!input heating_active', 'on') }}"
    now_time: "{{ now().strftime('%H:%M:%S') }}"
    timeframe_ok: >
      {% if !input allow_night %}
        {{ '!input time_start' <= now().strftime('%H:%M:%S') < '!input time_end' }}
      {% else %}
        true
      {% endif %}
    # ---- logical checks ----------------------------------------------------
    temp_ok: "{{ temp_out < (temp_in - (min_tempdiff | float)) }}"
    dew_ok: "{{ dew_out < dew_in }}"
    enth_ok: >
      {% if '!input enthalpy_in' != '' and '!input enthalpy_out' != '' %}
        {{ enth_out < enth_in }}
      {% else %} true {% endif %}
    forecast_ok: >
      {% if '!input forecast_high' != '' and '!input forecast_low' != '' %}
        {{ (f_low < comfort_max) and (f_high > temp_in) }}
      {% else %} true {% endif %}
    should_ventilate: "{{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and not heating_on }}"

  # -------------------------------------------------------------------------
  trigger:
    # sensor changes
    - platform: state
      entity_id: !input temp_out
    - platform: state
      entity_id: !input temp_in
    - platform: state
      entity_id: !input dew_out
    - platform: state
      entity_id: !input dew_in
    - platform: state
      entity_id: !input enthalpy_out
      enabled: "{{ '!input enthalpy_out' != '' }}"
    - platform: state
      entity_id: !input enthalpy_in
      enabled: "{{ '!input enthalpy_in' != '' }}"
    - platform: state
      entity_id: !input forecast_high
      enabled: "{{ '!input forecast_high' != '' }}"
    - platform: state
      entity_id: !input forecast_low
      enabled: "{{ '!input forecast_low' != '' }}"
    - platform: state
      entity_id: !input heating_active
    # periodic sanity
    - platform: time_pattern
      minutes: "/10"

  # -------------------------------------------------------------------------
  action:
    - choose:
        - conditions: "{{ should_ventilate and is_state('!input recommendation_boolean', 'off') }}"
          sequence:
            - service: input_boolean.turn_on
              target:
                entity_id: !input recommendation_boolean
            - choose:
                - conditions: "{{ '!input notify_group' != '' }}"
                  sequence:
                    - service: "notify/{{ !input notify_group }}"
                      data:
                        message: "ðŸ’¨ Bitte {{ room }} lÃ¼ften (Fenster Ã¶ffnen)."
        - conditions: "{{ (not should_ventilate) and is_state('!input recommendation_boolean', 'on') }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: !input recommendation_boolean
            - choose:
                - conditions: "{{ '!input notify_group' != '' }}"
                  sequence:
                    - service: "notify/{{ !input notify_group }}"
                      data:
                        message: "ðŸªŸ Bitte Fenster in {{ room }} schlieÃŸen."
    # Debug log -------------------------------------------------------------
    - choose:
        - conditions: "{{ !input debug_log }}"
          sequence:
            - service: system_log.write
              data:
                level: info
                message: >
                  LÃ¼ftenâ€‘Debug {{ room }}:\n
                    Tâ€‘OK {{ temp_ok }} OUT {{ temp_out }} < IN {{ temp_in }} â€“ Î” {{ min_tempdiff }}\n
                    Dâ€‘OK {{ dew_ok }} OUT {{ dew_out|round(1) }} < IN {{ dew_in|round(1) }}\n
                    Hâ€‘OK {{ enth_ok }} OUT {{ enth_out|round(1) }} < IN {{ enth_in|round(1) }}\n
                    Fâ€‘OK {{ forecast_ok }} Low {{ f_low }} < {{ comfort_max }} ; High {{ f_high }} > IN {{ temp_in }}\n
                    TFâ€‘OK {{ timeframe_ok }} {{ now_time }} in window\n
                    HZ {{ 'AN' if heating_on else 'AUS' }}\n
                    âžœ VENTILATE {{ 'JA' if should_ventilate else 'NEIN' }}
