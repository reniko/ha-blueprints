# Ventilation Recommendation (forecast + hysteresis, v0.7.2)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T (with open/close hysteresis) & Î”Taupunkt
# - Optional: Enthalpy comparison
# - Optional: Weatherâ€‘forecast check using Â«forecast_lowÂ» (next 6â€¯h), Â«forecast_highÂ» (nextÂ 12â€¯h) and Â«forecast_high_tomorrowÂ» (day+1 peak)
# - Optional: Time window (disable night ventilation)
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + hysteresis, v0.7.2)
  description: >
    Recommend window ventilation per room based on indoor/outdoor temperature,
    dew point, enthalpy, weather forecast and configurable hysteresis helpers.
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/ventilation.yaml

  input:
    room_slug:
      name: Room slug (used in helper/entity ids)
      selector:
        text:
    temp_in:
      name: Indoor temperature sensor
      selector:
        entity:
          domain: sensor
    temp_out:
      name: Outdoor temperature sensor
      selector:
        entity:
          domain: sensor
    dew_in:
      name: Indoor dewpoint sensor
      selector:
        entity:
          domain: sensor
    dew_out:
      name: Outdoor dewpoint sensor
      selector:
        entity:
          domain: sensor
    enthalpy_in:
      name: Indoor enthalpy sensor (optional)
      default: ''
      selector:
        entity:
          domain: sensor
    enthalpy_out:
      name: Outdoor enthalpy sensor (optional)
      default: ''
      selector:
        entity:
          domain: sensor
    forecast_low:
      name: Forecast low next 6â€¯h (optional)
      default: ''
      selector:
        entity:
          domain: sensor
    forecast_high:
      name: Forecast high next 12â€¯h (optional)
      default: ''
      selector:
        entity:
          domain: sensor
    forecast_high_tomorrow:
      name: Forecast high tomorrow (optional)
      default: ''
      selector:
        entity:
          domain: sensor
    min_delta_helper:
      name: Helper â€“ min Î”T to open (input_number)
      selector:
        entity:
          domain: input_number
    hysteresis_helper:
      name: Helper â€“ Î”T to close (input_number)
      selector:
        entity:
          domain: input_number
    comfort_helper:
      name: Helper â€“ comfort temperature (input_number)
      selector:
        entity:
          domain: input_number
    window_sensors:
      name: Optional window sensors (list)
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true
    heating_active:
      name: Heating active helper/entity
      selector:
        entity: {}
    recommendation_boolean:
      name: Output helper (input_boolean)
      selector:
        entity:
          domain: input_boolean
    notify_group:
      name: optional notify group (service id)
      default: ''
      selector:
        text:
    allow_night:
      name: allow night ventilation
      default: true
      selector:
        boolean:
    time_start:
      name: Start time (HH:MM:SS)
      default: '06:00:00'
      selector:
        time:
    time_end:
      name: End time (HH:MM:SS)
      default: '22:00:00'
      selector:
        time:
    debug_log:
      name: Enable debug log
      default: false
      selector:
        boolean:

mode: single

variables:
  room: !input room_slug
  temp_in_entity: !input temp_in
  temp_out_entity: !input temp_out
  dew_in_entity: !input dew_in
  dew_out_entity: !input dew_out
  enth_in_entity: !input enthalpy_in
  enth_out_entity: !input enthalpy_out
  f_low_entity: !input forecast_low
  f_high_entity: !input forecast_high
  f_high_tom_entity: !input forecast_high_tomorrow
  min_delta_helper_id: !input min_delta_helper
  hyst_helper_id: !input hysteresis_helper
  comfort_helper_id: !input comfort_helper
  heating_active_entity: !input heating_active

  temp_in: "{{ states(temp_in_entity)|float }}"
  temp_out: "{{ states(temp_out_entity)|float }}"
  dew_in: "{{ states(dew_in_entity)|float }}"
  dew_out: "{{ states(dew_out_entity)|float }}"
  enth_in: "{{ states(enth_in_entity)|float(default=0) if enth_in_entity else 0 }}"
  enth_out: "{{ states(enth_out_entity)|float(default=0) if enth_out_entity else 0 }}"
  f_low: "{{ states(f_low_entity)|float(default=99) if f_low_entity else 99 }}"
  f_high: "{{ states(f_high_entity)|float(default=-99) if f_high_entity else -99 }}"
  f_high_tom: "{{ states(f_high_tom_entity)|float(default=-99) if f_high_tom_entity else -99 }}"
  min_delta: "{{ states(min_delta_helper_id)|float(default=2) }}"
  reopen_delta: "{{ states(hyst_helper_id)|float(default=1) }}"
  comfort_val: "{{ states(comfort_helper_id)|float(default=25) }}"
  heating_on: "{{ is_state(heating_active_entity, 'on') }}"
  allow_night_flag: !input allow_night
  start_time: !input time_start
  end_time: !input time_end
  notify_target: !input notify_group
  debug_on: !input debug_log
  rec_bool_entity: !input recommendation_boolean

  delta_t: "{{ temp_in - temp_out }}"
  temp_ok: >
    {% if states(rec_bool_entity) == 'on' %}
      {{ delta_t > reopen_delta }}
    {% else %}
      {{ delta_t > min_delta }}
    {% endif %}
  dew_ok: "{{ dew_out < dew_in }}"
  enth_ok: >
    {% if enth_in_entity and enth_out_entity %}
      {{ enth_out < enth_in }}
    {% else %} true {% endif %}
  forecast_ok: >
    {% if f_low_entity %}
      {{ (f_low < temp_in - 1) and ((f_high > temp_in) or (f_high_tom > temp_in)) }}
    {% else %} true {% endif %}
  timeframe_ok: >
    {% if allow_night_flag %}
      true
    {% else %}
      {% set nowt = now().strftime('%H:%M:%S') %}
      {{ start_time <= nowt <= end_time }}
    {% endif %}
  should_ventilate: >
    {{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and (not heating_on) }}

trigger:
  - platform: time_pattern
    minutes: '/10'
  - platform: state
    entity_id:
      - !input temp_in
      - !input temp_out
      - !input dew_in
      - !input dew_out
    for: '00:05:00'

condition: []

action:
  - choose:
      - conditions: "{{ should_ventilate }}"
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ rec_bool_entity }}"
          - choose:
              - conditions: "{{ notify_target and (states(rec_bool_entity) == 'off') }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸ’¨ LÃ¼ften empfohlen im Raum {{ room }}"
      - conditions: "{{ not should_ventilate }}"
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ rec_bool_entity }}"
          - choose:
              - conditions: "{{ notify_target and (states(rec_bool_entity) == 'on') }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸªŸ Fenster in {{ room }} schlieÃŸen"
  - choose:
      - conditions: "{{ debug_on }}"
        sequence:
          - service: logbook.log
            data:
              name: Ventilation Debug
              entity_id: "{{ rec_bool_entity }}"
              message: >
                Î”T {{ delta_t | round(1) }} K | temp_ok={{ temp_ok }} |
                dew_ok={{ dew_ok }} | enth_ok={{ enth_ok }} |
                forecast_ok={{ forecast_ok }} | timeframe_ok={{ timeframe_ok }} |
                should={{ should_ventilate }}
