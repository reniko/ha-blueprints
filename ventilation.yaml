# Ventilation Recommendation (forecast + hysteresis, v0.6.1)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T (with open/close hysteresis) & Î”Taupunkt
# - Optional: Enthalpy comparison
# - Optional: Weatherâ€‘forecast check using Â«forecast_lowÂ» (next 6â€¯h) and Â«forecast_highÂ» (nextÂ 12â€¯h)
# - Optional: Time window (disable night ventilation)
# - All temperature thresholds (Î”TÂ to open, hysteresis to close, comfort setâ€‘point)
#   are now read from **input_number helpers** so you can retune them from the UI.
# - Writes result to an input_boolean and (optionally) sends a push notification.
# - Debug output goes to Logbook via logbook.log, attached to the same boolean entity.
#
# 2025â€‘05â€‘21 â€“ v0.6.1  (fix YAML colons, complete turn_off branch, helper variables)
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + hysteresis, v0.6.1)
  description: >
    Recommends when to open / close windows for passive cooling of a room.
    It compares indoor vs. outdoor temperature, dew point (and optional enthalpy),
    checks userâ€‘defined thresholds from input_number helpers, optionally evaluates
    a weather forecast and respects a time window so groundâ€‘floor rooms stay closed overnight.
  domain: automation

  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml

input:
  room_slug:
    name: Raumâ€‘Slug (nur Buchstaben/Zahl, ohne Leerzeichen)
    description: Kurzname des Raums, taucht in Benachrichtigungen auf.
  temp_in:
    name: Innenâ€‘Temperatursensor
    selector:
      entity:
        domain: sensor
  temp_out:
    name: AuÃŸenâ€‘Temperatursensor
    selector:
      entity:
        domain: sensor
  dew_in:
    name: Taupunkt (innen)
    selector:
      entity:
        domain: sensor
  dew_out:
    name: Taupunkt (auÃŸen)
    selector:
      entity:
        domain: sensor
  enthalpy_in:
    name: Entalpie (innen) â€“ optional
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  enthalpy_out:
    name: Entalpie (auÃŸen) â€“ optional
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  forecast_low:
    name: Forecastâ€‘Low (nÃ¤chsteÂ 6â€¯h) â€“ optional
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  forecast_high:
    name: Forecastâ€‘High (nÃ¤chsteÂ 12â€¯h) â€“ optional
    default: ""
    selector:
      entity:
        domain: sensor
        multiple: false
  comfort_helper:
    name: Globales Komfortâ€‘Setpoint (input_number)
    description: Wird genutzt, um den Komfortâ€‘Schwellwert zentral zu verwalten.
    default: ""
    selector:
      entity:
        domain: input_number
        multiple: false
  min_delta_helper:
    name: Î”T zum Ã–ffnen â€“ Helper (input_number)
    description: Gibt die Temperaturdifferenz an, ab der geÃ¶ffnet werden soll.
    default: ""
    selector:
      entity:
        domain: input_number
        multiple: false
  hysteresis_helper:
    name: Hysterese zum SchlieÃŸen â€“ Helper (input_number)
    description: Gibt an, wie weit Î”T fallen darf, bevor wieder geschlossen wird.
    default: ""
    selector:
      entity:
        domain: input_number
        multiple: false
  heating_active:
    name: EntitÃ¤t â€žHeizung aktivâ€œ (Bool)
    selector:
      entity:
        domain: input_boolean
        multiple: false
  window_sensors:
    name: Fensterkontakte (optional)
    default: []
    selector:
      entity:
        domain: binary_sensor
        device_class: window
        multiple: true
  recommendation_boolean:
    name: Zielâ€‘Helper (input_boolean)
    selector:
      entity:
        domain: input_boolean
  notify_group:
    name: Notifyâ€‘Service / Notifyâ€‘Gruppe (optional)
    default: ""
  allow_night:
    name: Nachts lÃ¼ften erlauben?
    default: true
    selector:
      boolean: {}
  time_start:
    name: Startzeit LÃ¼ftungsfenster (HH:MM:SS)
    default: "06:00:00"
  time_end:
    name: Endzeit LÃ¼ftungsfenster (HH:MM:SS)
    default: "22:00:00"
  debug_log:
    name: Debugâ€‘Log aktivieren?
    default: false
    selector:
      boolean: {}

# -----------------------------------------------------------------
variables:
  room: !input room_slug
  # helper ids
  min_delta_helper_id: !input min_delta_helper
  reopen_helper_id: !input hysteresis_helper
  comfort_helper_id: !input comfort_helper
  # helper values (fallbacks)
  min_delta: >
    {% if min_delta_helper_id %}
      {{ states(min_delta_helper_id) | float(default=2) }}
    {% else %} 2 {% endif %}
  reopen_delta: >
    {% if reopen_helper_id %}
      {{ states(reopen_helper_id) | float(default=1) }}
    {% else %} 1 {% endif %}
  comfort_val: >
    {% if comfort_helper_id %}
      {{ states(comfort_helper_id) | float(default=25) }}
    {% else %} 25 {% endif %}

  # entity ids
  temp_in_entity: !input temp_in
  temp_out_entity: !input temp_out
  dew_in_entity: !input dew_in
  dew_out_entity: !input dew_out
  enth_in_entity: !input enthalpy_in
  enth_out_entity: !input enthalpy_out
  forecast_low_entity: !input forecast_low
  forecast_high_entity: !input forecast_high
  heating_entity: !input heating_active
  rec_bool_entity: !input recommendation_boolean
  notify_target: !input notify_group
  window_entities: !input window_sensors

  # current readings
  temp_in: "{{ states(temp_in_entity)  | float(default=99) }}"
  temp_out: "{{ states(temp_out_entity) | float(default=-99) }}"
  dew_in: "{{ states(dew_in_entity)  | float(default=99) }}"
  dew_out: "{{ states(dew_out_entity) | float(default=-99) }}"
  enth_in: >
    {% if enth_in_entity %}
      {{ states(enth_in_entity) | float(default=0) }}
    {% else %} 0 {% endif %}
  enth_out: >
    {% if enth_out_entity %}
      {{ states(enth_out_entity) | float(default=0) }}
    {% else %} 0 {% endif %}
  f_low: >
    {% if forecast_low_entity %}
      {{ states(forecast_low_entity) | float(default=99) }}
    {% else %} 99 {% endif %}
  f_high: >
    {% if forecast_high_entity %}
      {{ states(forecast_high_entity) | float(default=-99) }}
    {% else %} -99 {% endif %}

  # heater & recommendation state
  heating_on: "{{ is_state(heating_entity, 'on') }}"
  rec_state: "{{ states(rec_bool_entity) }}"  # 'on' / 'off'

  # time window check
  allow_night: !input allow_night
  start_time: !input time_start
  end_time: !input time_end
  timeframe_ok: >
    {% if allow_night %}
      true
    {% else %}
      {% set now_time = now().strftime('%H:%M:%S') %}
      {{ start_time <= now_time <= end_time }}
    {% endif %}

  # condition flags
  delta_t: "{{ temp_in - temp_out }}"
  temp_ok: >
    {% if rec_state == 'on' %}
      {{ delta_t | float > reopen_delta }}
    {% else %}
      {{ delta_t | float > min_delta }}
    {% endif %}
  dew_ok: "{{ dew_out < dew_in }}"
  enth_ok: >
    {% if enth_in_entity and enth_out_entity %}
      {{ enth_out < enth_in }}
    {% else %} true {% endif %}
  forecast_ok: >
    {% if forecast_low_entity %}
      {{ (temp_in > comfort_val) and (f_low < temp_in - 1) }}
    {% else %} true {% endif %}
  should_ventilate: >
    {{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and (not heating_on) }}

  debug_on: !input debug_log

# -----------------------------------------------------------------
trigger:
  - platform: time_pattern
    minutes: "/10"
  - platform: state
    entity_id:
      - !input temp_in
      - !input temp_out
      - !input dew_in
      - !input dew_out
      - !input enthalpy_in
      - !input enthalpy_out
      - !input heating_active
      - !input forecast_low
      - !input forecast_high
      - "{{ min_delta_helper_id if min_delta_helper_id else none }}"
      - "{{ reopen_helper_id if reopen_helper_id else none }}"
      - "{{ comfort_helper_id if comfort_helper_id else none }}"

# -----------------------------------------------------------------
action:
  - choose:
      - conditions:
          - "{{ should_ventilate }}"
          - "{{ rec_state != 'on' }}"
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ rec_bool_entity }}"
          - choose:
              - conditions: "{{ notify_target != '' }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: >
                        ðŸ’¨ *{{ room }}*: LÃ¼ften empfohlen (Î”T {{ delta_t | round(1) }}â€¯K).
      - conditions:
          - "{{ not should_ventilate }}"
          - "{{ rec_state == 'on' }}"
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: "
