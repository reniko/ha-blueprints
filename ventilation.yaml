# Home Assistant Blueprint â€“â€¯Ventilation Recommendation (per room, v0.4.4)
# -------------------------------------------------------------------------
# VERSION: 0.4.4  (2025â€‘05â€‘21)
# Changelog
#   â€¢ FIX: all Jinja template calls now quote the !input reference â†’ states('!input temp_in')
#          & is_state('!input heating_active', 'on'). Removes TemplateSyntaxError.
#   â€¢ Name updated so HA shows new version immediately.
#   â€¢ Pressure logic removed; rest unchanged.
# -------------------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + time window, v0.4.4)
  description: |
    Calculates whether window ventilation is advisable for a single roomâ€¦
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml

  input:
    room_slug:
      name: Room slug (lowercase, no spaces)
    temp_in:
      name: Indoor temperature sensor
      selector: { entity: { domain: sensor } }
    temp_out:
      name: Outdoor temperature sensor
      selector: { entity: { domain: sensor } }
    dew_in:
      name: Indoor dewâ€‘point
      selector: { entity: { domain: sensor } }
    dew_out:
      name: Outdoor dewâ€‘point
      selector: { entity: { domain: sensor } }
    enthalpy_in:
      name: (Optional) Indoor enthalpy
      selector: { entity: { domain: sensor } }
      default: ""
    enthalpy_out:
      name: (Optional) Outdoor enthalpy
      selector: { entity: { domain: sensor } }
      default: ""
    forecast_high:
      name: (Optional) Forecast high temperature
      selector: { entity: { domain: sensor } }
      default: ""
    forecast_low:
      name: (Optional) Forecast night low temperature
      selector: { entity: { domain: sensor } }
      default: ""
    window_sensors:
      name: (Optional) Window contact sensors
      selector: { entity: { domain: binary_sensor, device_class: window, multiple: true } }
      default: []
    heating_active:
      name: Helper/entity that is 'on' when heating is active
      selector: { entity: {} }
    recommendation_boolean:
      name: Input boolean helper to store recommendation
      selector: { entity: { domain: input_boolean } }
    notify_group:
      name: (Optional) Notify group for push messages
      selector: { entity: { domain: notify } }
      default: ""
    allow_night:
      name: Allow night ventilation (true/false)
      selector: { boolean: {} }
      default: true
    time_start:
      name: Start time for daytime window
      selector: { time: {} }
      default: "06:00:00"
    time_end:
      name: End time for daytime window
      selector: { time: {} }
      default: "22:00:00"
    min_temp_diff:
      name: Minimum temperature difference (Â°C)
      selector: { number: { min: 0, max: 5, step: 0.5, unit_of_measurement: "Â°C" } }
      default: 1
    comfort_max:
      name: Comfort maximum temperature (Â°C)
      selector: { number: { min: 18, max: 30, step: 0.5, unit_of_measurement: "Â°C" } }
      default: 25
    debug_log:
      name: Write detailed debug to system_log
      selector: { boolean: {} }
      default: false

mode: single

trigger:
  - platform: state
    entity_id: !input temp_out
  - platform: state
    entity_id: !input temp_in
  - platform: state
    entity_id: !input dew_out
  - platform: state
    entity_id: !input dew_in
  - platform: state
    entity_id: !input enthalpy_out
  - platform: state
    entity_id: !input enthalpy_in
  - platform: state
    entity_id: !input heating_active
  - platform: state
    entity_id: !input forecast_high
  - platform: state
    entity_id: !input forecast_low
  - platform: time_pattern
    minutes: "/10"

variables:
  room: !input room_slug
  min_tempdiff: "{{ (!input min_temp_diff) | float }}"
  comfort_max: "{{ (!input comfort_max) | float }}"

  temp_in: "{{ states('!input temp_in') | float }}"
  temp_out: "{{ states('!input temp_out') | float }}"
  dew_in: "{{ states('!input dew_in') | float }}"
  dew_out: "{{ states('!input dew_out') | float }}"

  enth_in: >
    {% if !input enthalpy_in %}{{ states('!input enthalpy_in') | float }}{% else %}0{% endif %}
  enth_out: >
    {% if !input enthalpy_out %}{{ states('!input enthalpy_out') | float }}{% else %}0{% endif %}

  f_high: >
    {% if !input forecast_high %}{{ states('!input forecast_high') | float }}{% else %}-99{% endif %}
  f_low: >
    {% if !input forecast_low %}{{ states('!input forecast_low') | float }}{% else %}99{% endif %}

  heating_on: "{{ is_state('!input heating_active', 'on') }}"
  now_time: "{{ now().strftime('%H:%M:%S') }}"

  timeframe_ok: >
    {% if !input allow_night %}true{% else %}
      {{ '!input time_start' <= now().strftime('%H:%M:%S') < '!input time_end' }}
    {% endif %}

  temp_ok: "{{ temp_out < (temp_in - min_tempdiff) }}"
  dew_ok:  "{{ dew_out  < dew_in }}"
  enth_ok: >
    {% if !input enthalpy_in and !input enthalpy_out %}
      {{ enth_out < enth_in }}
    {% else %}true{% endif %}
  forecast_ok: >
    {% if !input forecast_high and !input forecast_low %}
      {{ (f_low < comfort_max) and (f_high > temp_in) }}
    {% else %}true{% endif %}

  should_ventilate: >
    {{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and not heating_on }}

action:
  - choose:
      - conditions: "{{ should_ventilate and is_state('!input recommendation_boolean', 'off') }}"
        sequence:
          - service: input_boolean.turn_on
            target: { entity_id: !input recommendation_boolean }
          - choose:
              - conditions: "{{ !input notify_group != '' }}"
                sequence:
                  - service: !input notify_group
                    data:
                      message: "ðŸ’¨ Bitte {{ room }} lÃ¼ften (Fenster Ã¶ffnen)."
      - conditions: "{{ (not should_ventilate) and is_state('!input recommendation_boolean', 'on') }}"
        sequence:
          - service: input_boolean.turn_off
            target: { entity_id: !input recommendation_boolean }
          - choose:
              - conditions: "{{ !input notify_group != '' }}"
                sequence:
                  - service: !input notify_group
                    data:
                      message: "ðŸªŸ Bitte Fenster in {{ room }} schlieÃŸen."
  - choose:
      - conditions: "{{ !input debug_log | bool }}"
        sequence:
          - service: system_log.write
            data:
              level: info
              message: |
                LÃ¼ften-Debug {{ room }}:
                  T-OK: {{ temp_ok }} OUT {{ temp_out }} < IN {{ temp_in }} - Î” {{ min_tempdiff }}
                  D-OK: {{ dew_ok }} OUT {{ dew_out|round(1) }} < IN {{ dew_in|round(1) }}
                  H-OK: {{ enth_ok }} OUT {{ enth_out|round(1) }} < IN {{ enth_in|round(1) }}
                  F-OK: {{ forecast_ok }} Low {{ f_low }} < {{ comfort_max }} ; High {{ f_high }} > IN {{ temp_in }}
                  TF-OK: {{ timeframe_ok }} '!input time_start' < {{ now_time }} < '!input time_end'
                  HZ-OK: {{ not heating_on }}  Heizung {{ 'AN' if heating_on else 'AUS' }}
                  âžœ VENTILATE = {{ 'JA' if should_ventilate else 'NEIN' }}
