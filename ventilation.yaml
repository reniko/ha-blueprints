# Ventilation Recommendation (forecast + hysteresis, v0.8.0)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T (with open/close hysteresis) & Î”Taupunkt
# - Optional: Enthalpy comparison
# - Forecast strategy Â«Overheatâ€‘BypassÂ»:  
#   * Wenn Raum Ã¼berhitzt (Temp_in > comfort + margin) â†’ nur Nightâ€‘Low < Temp_inâ€‘1 K nÃ¶tig  
#   * Sonst zusÃ¤tzlich: (Peak12h oder PeakTomorrow) > comfort + 1 K  
# - Optional time window pro Raum  
# - Flappingâ€‘Schutz durch Temperaturâ€‘Hysterese & 5â€‘min stateâ€‘delay
# - Debugâ€‘Log via logbook.log  
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + hysteresis, v0.8.0)
  description: >
    Recommends opening / closing windows for passive cooling per room,
    using temperature & dewâ€‘point deltas with hysteresis, forecastâ€‘based
    preâ€‘cooling (Overheatâ€‘Bypass strategy) and optional time windows. A
    boolean helper reflects the recommendation and can trigger mobile
    notifications.
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml

  input:
    # --- Room & Devices -------------------------------------------------
    room_slug:
      name: Room slug
      selector: text:
    temp_in:
      name: Temperature inside
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temp_out:
      name: Temperature outside
      selector:
        entity:
          domain: sensor
          device_class: temperature
    dew_in:
      name: Dewpoint inside
      selector:
        entity:
          domain: sensor
          device_class: temperature
    dew_out:
      name: Dewpoint outside
      selector:
        entity:
          domain: sensor
          device_class: temperature
    enthalpy_in:
      name: Enthalpy inside (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    enthalpy_out:
      name: Enthalpy outside (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    window_sensors:
      name: Window contacts (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true

    # --- Helpers & thresholds ------------------------------------------
    min_delta_helper:
      name: Min Î”T to open (input_number)
      selector:
        entity:
          domain: input_number
    hysteresis_helper:
      name: Î”T to close (input_number)
      selector:
        entity:
          domain: input_number
    comfort_helper:
      name: Comfort temperature (input_number)
      selector:
        entity:
          domain: input_number
    overheat_margin_helper:
      name: Overheat margin (input_number)
      selector:
        entity:
          domain: input_number

    # --- Forecast sensors (optional) -----------------------------------
    forecast_low:
      name: Forecast low next 6h
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_high:
      name: Forecast high next 12h
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_high_tomorrow:
      name: Forecast high tomorrow
      default: ""
      selector:
        entity:
          domain: sensor

    # --- Heating state & outputs ---------------------------------------
    heating_active:
      name: Heating active boolean
      selector:
        entity:
          domain: input_boolean
    recommendation_boolean:
      name: Recommendation boolean out
      selector:
        entity:
          domain: input_boolean
    notify_group:
      name: Notify group (optional)
      default: ""
      selector:
        text:

    # --- Time window & flags -------------------------------------------
    allow_night:
      name: Allow night ventilation
      selector: boolean:
    time_start:
      name: Earliest ventilation time
      default: "06:00:00"
      selector: time:
    time_end:
      name: Latest ventilation time
      default: "22:00:00"
      selector: time:
    debug_log:
      name: Debug log
      default: false
      selector: boolean:

# ======================================================================
mode: single

variables:
  room: !input room_slug
  # helpers
  min_delta: "{{ states(!input min_delta_helper)|float(2) }}"
  close_delta: "{{ states(!input hysteresis_helper)|float(1) }}"
  comfort_val: "{{ states(!input comfort_helper)|float(25) }}"
  over_margin: "{{ states(!input overheat_margin_helper)|float(1) }}"

  # sensors raw ids
  temp_in_ent: !input temp_in
  temp_out_ent: !input temp_out
  dew_in_ent: !input dew_in
  dew_out_ent: !input dew_out
  enth_in_ent: !input enthalpy_in
  enth_out_ent: !input enthalpy_out
  f_low_ent: !input forecast_low
  f_high_ent: !input forecast_high
  f_high_tom_ent: !input forecast_high_tomorrow
  heat_ent: !input heating_active
  rec_bool_ent: !input recommendation_boolean

  # sensor values numeric ------------------------------------------------
  temp_in: "{{ states(temp_in_ent)|float }}"
  temp_out: "{{ states(temp_out_ent)|float }}"
  dew_in: "{{ states(dew_in_ent)|float }}"
  dew_out: "{{ states(dew_out_ent)|float }}"
  enth_in: "{{ states(enth_in_ent)|float(default=0) }}"
  enth_out: "{{ states(enth_out_ent)|float(default=0) }}"
  f_low: "{{ states(f_low_ent)|float(default=99) }}"
  f_high: "{{ states(f_high_ent)|float(default=-99) }}"
  f_high_tom: "{{ states(f_high_tom_ent)|float(default=-99) }}"
  heating_on: "{{ is_state(heat_ent, 'on') }}"

  # delta & status -------------------------------------------------------
  delta_t: "{{ temp_in - temp_out }}"
  delta_dew: "{{ dew_in - dew_out }}"
  overheat: "{{ temp_in > comfort_val + over_margin }}"

  # --- Forecast OK calculation (Overheatâ€‘Bypass) -----------------------
  forecast_ok: >
    {% if not f_low_ent %}
      true
    {% else %}
      {% set lo_cond = f_low < temp_in - 1 %}
      {% if overheat %}
        {{ lo_cond }}
      {% else %}
        {{ lo_cond and (max(f_high, f_high_tom) > comfort_val + 1) }}
      {% endif %}
    {% endif %}

  # --- Time window check ----------------------------------------------
  allow_night_flag: !input allow_night
  time_start_val: !input time_start
  time_end_val: !input time_end
  timeframe_ok: >
    {% if allow_night_flag %} true {% else %}
      {% set t = now().strftime('%H:%M:%S') %}
      {{ time_start_val <= t <= time_end_val }}
    {% endif %}

  # --- Temperature hysteresis -----------------------------------------
  rec_state: "{{ states(rec_bool_ent) }}"
  temp_ok: >
    {% if rec_state == 'on' %}
      {{ delta_t > close_delta }}
    {% else %}
      {{ delta_t > min_delta }}
    {% endif %}

  # --- Dewpoint check --------------------------------------------------
  dew_ok: "{{ dew_out < dew_in }}"

  # --- Enthalpy check (optional) --------------------------------------
  enth_ok: >
    {% if enth_in_ent and enth_out_ent %}
      {{ enth_out < enth_in }}
    {% else %} true {% endif %}

  # --- Final recommendation -------------------------------------------
  should_vent: "{{ temp_ok and dew_ok and enth_ok and forecast_ok and not heating_on and timeframe_ok }}"

trigger:
  - platform: time_pattern
    minutes: '/10'
  - platform: state
    entity_id:
      - !input temp_in
      - !input temp_out
      - !input dew_in
      - !input dew_out
      - !input heating_active
    for: '00:05:00'

condition: []

action:
  - choose:
      - conditions: "{{ should_vent }}"
        sequence:
          - service: homeassistant.turn_on
            target: { entity_id: "{{ rec_bool_ent }}" }
          - if:
              - condition: template
                value_template: "{{ rec_state == 'off' and notify_group != '' }}"
            then:
              - service: "{{ notify_group }}"
                data:
                  message: "ðŸ’¨ {{ room }}: LÃ¼ften empfohlen â€“ Î”T {{ delta_t|round(1) }} K"
      - conditions: "{{ not should_vent }}"
        sequence:
          - service: homeassistant.turn_off
            target: { entity_id: "{{ rec_bool_ent }}" }
          - if:
              - condition: template
                value_template: "{{ rec_state == 'on' and notify_group != '' }}"
            then:
              - service: "{{ notify_group }}"
                data:
                  message: "ðŸªŸ {{ room }}: Fenster schlieÃŸen â€“ Î”T {{ delta_t|round(1) }} K"

  # Debug log -----------------------------------------------------------
  - if: "{{ !input debug_log }}"
    then: []
    else:
      - service: logbook.log
        data:
          name: Ventilation Debug
          entity_id: "{{ rec_bool_ent }}"
          message: >
            Î”T {{ delta_t|round(1) }} K | Î”Ï„ {{ delta_dew|round(1) }} K | overheat={{ overheat }} |\n            temp_ok={{ temp_ok }} dew_ok={{ dew_ok }} enth_ok={{ enth_ok }} forecast_ok={{ forecast_ok }} |\n            timeframe_ok={{ timeframe_ok }} | result={{ should_vent }}
