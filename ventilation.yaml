# Ventilation Recommendation (forecast + hysteresis, v0.6.3)
# -----------------------------------------------------------------
# Calculates whether window ventilation is recommended for a single room.
# - Core checks: Î”T (with open/close hysteresis) & Î”Taupunkt
# - Optional: Enthalpy comparison
# - Optional: Weatherâ€‘forecast check using Â«forecast_lowÂ» (next 6â€¯h) and Â«forecast_highÂ» (nextÂ 12â€¯h)
# - Optional: Time window (disable night ventilation)
# - All thresholds are now read from input_number helpers so you can retune them on the fly.
# - Outputs recommendation to an input_boolean and can push notifications.
# - Debug information is written to Logbook via logbook.log attached to the same boolean.
#
# 2025â€‘05â€‘21 â€“ v0.6.3 (input inside blueprint block, static trigger list, YAML valid)
# -----------------------------------------------------------------
blueprint:
  name: Ventilation Recommendation (forecast + hysteresis, v0.6.3)
  description: >
    Recommends when to open or close windows for passive cooling of a room.
    It compares indoor vs. outdoor temperature, dew point (and optional enthalpy),
    applies open/close hysteresis read from helpers, can check a shortâ€‘term weather forecast
    and respects a daytime window so groundâ€‘floor rooms stay shut overnight.
  domain: automation
  source_url: https://github.com/reniko/ha-blueprints/blob/main/ventilation.yaml
  input:
    room_slug:
      name: Raumâ€‘Slug (Kurzname ohne Leerzeichen)
      selector:
        text:
          multiline: false
    temp_in:
      name: Innenâ€‘Temperaturâ€‘Sensor
      selector:
        entity:
          domain: sensor
    temp_out:
      name: AuÃŸenâ€‘Temperaturâ€‘Sensor
      selector:
        entity:
          domain: sensor
    dew_in:
      name: Taupunkt innen
      selector:
        entity:
          domain: sensor
    dew_out:
      name: Taupunkt auÃŸen
      selector:
        entity:
          domain: sensor
    enthalpy_in:
      name: Entalpie innen (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    enthalpy_out:
      name: Entalpie auÃŸen (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_low:
      name: Forecast LowÂ (nÃ¤chsteÂ 6â€¯h) (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    forecast_high:
      name: Forecast HighÂ (nÃ¤chsteÂ 12â€¯h) (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    comfort_helper:
      name: Globaler Komfortâ€‘Setpoint (input_number, optional)
      default: ""
      selector:
        entity:
          domain: input_number
    min_delta_helper:
      name: Î”Tâ€‘Schwelle zum Ã–ffnen (input_number)
      selector:
        entity:
          domain: input_number
    hysteresis_helper:
      name: Î”Tâ€‘Hysterese zum SchlieÃŸen (input_number)
      selector:
        entity:
          domain: input_number
    heating_active:
      name: EntitÃ¤t â€žHeizung aktivâ€œ (input_boolean)
      selector:
        entity:
          domain: input_boolean
    window_sensors:
      name: Fensterkontakte (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true
    recommendation_boolean:
      name: Zielâ€‘Helper (input_boolean)
      selector:
        entity:
          domain: input_boolean
    notify_group:
      name: Notifyâ€‘Service oder -Gruppe (optional)
      default: ""
      selector:
        text: {}
    allow_night:
      name: Nachts lÃ¼ften erlauben?
      default: true
      selector:
        boolean: {}
    time_start:
      name: Startzeit LÃ¼ftungsfenster (HH:MM:SS)
      default: "06:00:00"
      selector:
        text:
          multiline: false
    time_end:
      name: Endzeit LÃ¼ftungsfenster (HH:MM:SS)
      default: "22:00:00"
      selector:
        text:
          multiline: false
    debug_log:
      name: Debugâ€‘Log aktivieren?
      default: false
      selector:
        boolean: {}

variables:
  room: !input room_slug
  min_delta_entity: !input min_delta_helper
  hysteresis_entity: !input hysteresis_helper
  comfort_entity: !input comfort_helper
  # Helperâ€‘Werte (mit Fallback)
  min_delta: "{{ states(min_delta_entity)|float(default=2) }}"
  reopen_delta: "{{ states(hysteresis_entity)|float(default=1) }}"
  comfort_val: >
    {% if comfort_entity %}
      {{ states(comfort_entity)|float(default=25) }}
    {% else %} 25 {% endif %}

  # Sensorâ€‘EntitÃ¤ten
  temp_in_entity: !input temp_in
  temp_out_entity: !input temp_out
  dew_in_entity: !input dew_in
  dew_out_entity: !input dew_out
  enth_in_entity: !input enthalpy_in
  enth_out_entity: !input enthalpy_out
  f_low_entity: !input forecast_low
  f_high_entity: !input forecast_high
  heating_entity: !input heating_active
  rec_entity: !input recommendation_boolean
  notify_target: !input notify_group
  window_entities: !input window_sensors

  # Aktuelle Messwerte
  temp_in: "{{ states(temp_in_entity)|float(default=99) }}"
  temp_out: "{{ states(temp_out_entity)|float(default=-99) }}"
  dew_in: "{{ states(dew_in_entity)|float(default=99) }}"
  dew_out: "{{ states(dew_out_entity)|float(default=-99) }}"
  enth_in: "{{ states(enth_in_entity)|float(default=0) }}"
  enth_out: "{{ states(enth_out_entity)|float(default=0) }}"
  f_low: "{{ states(f_low_entity)|float(default=99) }}"
  f_high: "{{ states(f_high_entity)|float(default=-99) }}"

  # Interne Flags
  delta_t: "{{ temp_in - temp_out }}"
  heating_on: "{{ is_state(heating_entity, 'on') }}"
  rec_state: "{{ states(rec_entity) }}"

  # Zeitfenster
  allow_night_flag: !input allow_night
  timeframe_ok: >
    {% if allow_night_flag %}
      true
    {% else %}
      {% set n = now().strftime('%H:%M:%S') %}
      {{ (!input time_start) <= n <= (!input time_end) }}
    {% endif %}

  # Bedingungen
  temp_ok: >
    {% if rec_state == 'on' %}
      {{ delta_t | float > reopen_delta }}
    {% else %}
      {{ delta_t | float > min_delta }}
    {% endif %}
  dew_ok: "{{ dew_out < dew_in }}"
  enth_ok: >
    {% if enth_in_entity and enth_out_entity %}
      {{ enth_out < enth_in }}
    {% else %} true {% endif %}
  forecast_ok: >
    {% if f_low_entity %}
      {{ (temp_in > comfort_val) and (f_low < temp_in - 1) }}
    {% else %} true {% endif %}
  should_vent: "{{ temp_ok and dew_ok and enth_ok and forecast_ok and timeframe_ok and (not heating_on) }}"
  debug_on: !input debug_log

trigger:
  - platform: time_pattern
    minutes: "/10"
  - platform: state
    entity_id:
      - !input temp_in
      - !input temp_out
      - !input dew_in
      - !input dew_out
      - !input enthalpy_in
      - !input enthalpy_out
      - !input heating_active
      - !input forecast_low
      - !input forecast_high

action:
  - choose:
      - conditions:
          - "{{ should_vent }}"
          - "{{ rec_state != 'on' }}"
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ rec_entity }}"
          - choose:
              - conditions: "{{ notify_target != '' }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸ’¨ *{{ room }}*: LÃ¼ften empfohlen (Î”T {{ delta_t|round(1) }}â€¯K)."
      - conditions:
          - "{{ not should_vent }}"
          - "{{ rec_state == 'on' }}"
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ rec_entity }}"
          - choose:
              - conditions: "{{ notify_target != '' }}"
                sequence:
                  - service: "{{ notify_target }}"
                    data:
                      message: "ðŸªŸ *{{ room }}*: Fenster schlieÃŸen (Î”T {{ delta_t|round(1) }}â€¯K)."
  - choose:
      - conditions: "{{ debug_on }}"
        sequence:
          - service: logbook.log
            data:
              name: Ventilation Debug
              entity_id: "{{ rec_entity }}"
              message: >
                LÃ¼ften={{ 'JA' if should_vent else 'NEIN' }} | Î”T={{ delta_t|round(1) }}K |
                temp_OK={{ temp_ok }} Ï„_OK={{ dew_ok }} enth_OK={{ enth_ok }} fc_OK={{ forecast_ok }} |
                Heizung={{ 'AN' if heating_on else 'AUS' }} timeframe_OK={{ timeframe_ok }}

mode: single
